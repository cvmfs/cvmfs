#!/bin/sh
#
# This file is part of the CernVM File System
# This script takes care of creating, removing, and maintaining repositories
# on a Stratum 0/1 server

set -e

die() {
  echo -e $1 >&2
  exit 1
}

transaction_before_hook() { :; }
transaction_after_hook() { :; }
abort_before_hook() { :; }
abort_after_hook() { :; }
publish_before_hook() { :; }
publish_after_hook() { :; }

if [ -x /sbin/fuser ]; then
  fuser="/sbin/fuser"  # RHEL
else
  fuser="/bin/fuser"  # Ubuntu, SuSe
fi


create_master_key() {
  local name=$1
  local user=$2

  master_key="/etc/cvmfs/keys/$name.masterkey"
  master_pub="/etc/cvmfs/keys/$name.pub"

  echo -n "Creating CernVM-FS master key for $name in $master_pub... "
  openssl genrsa -out $master_key 2048 > /dev/null 2>&1
  openssl rsa -in $master_key -pubout -out $master_pub > /dev/null 2>&1
  chmod 444 $master_key $master_pub
  chown $user $master_key $master_pub
  echo "done"
}


create_cert() {
  local name=$1
  local user=$2

  local key; key="/etc/cvmfs/keys/$name.key"
  local csr; csr="/etc/cvmfs/keys/$name.csr"
  local crt; crt="/etc/cvmfs/keys/$name.crt"

  # Create self-signed certificate
  echo -n "Creating self-signed certificate for $name in $crt... "
  openssl genrsa -out $key 2048 > /dev/null 2>&1
  openssl req -new -subj "/C=/ST=/L=/O=/OU=/CN=$name CernVM-FS Release Managers" -key $key -out $csr > /dev/null 2>&1
  openssl x509 -req -days 365 -in $csr -signkey $key -out $crt > /dev/null 2>&1
  rm -f $csr
  chmod 444 $key $crt
  chown $user $master_key $master_pub
  echo "done"
}


create_whitelist() {
  local name=$1
  local user=$2
  local spooler_definition=$3
  local temp_dir=$4

  local whitelist
  whitelist=${temp_dir}/whitelist.$name

  echo -n "Signing 30 day whitelist with master key... "
  echo `date -u "+%Y%m%d%H%M%S"` > ${whitelist}.unsigned
  echo "E`date -u --date='next month' "+%Y%m%d%H%M%S"`" >> ${whitelist}.unsigned
  echo "N$name" >> ${whitelist}.unsigned
  openssl x509 -fingerprint -sha1 -in /etc/cvmfs/keys/${name}.crt | grep "SHA1 Fingerprint" | sed 's/SHA1 Fingerprint=//' >> ${whitelist}.unsigned

  local sha1; sha1=`openssl sha1 < ${whitelist}.unsigned | tr -d '\n' | tail -c40`
  echo "--" >> ${whitelist}.unsigned
  echo $sha1 >> ${whitelist}.unsigned
  echo -n $sha1 > ${whitelist}.sha1
  openssl rsautl -inkey /etc/cvmfs/keys/${name}.masterkey -sign -in ${whitelist}.sha1 -out ${whitelist}.signature
  cat ${whitelist}.unsigned ${whitelist}.signature > $whitelist
  chown $user $whitelist

  rm -f ${whitelist}.unsigned ${whitelist}.signature ${whitelist}.sha1
  cvmfs_swissknife upload -i $whitelist -o .cvmfswhitelist -r $spooler_definition
  rm -f $whitelist
  echo "done"
}


get_expiry() {
  local name=$1
  local stratum0=$2

  local expires=$(curl $stratum0/.cvmfswhitelist 2>/dev/null | head -2 | tail -1 | tail -c15)
  local year=$(echo $expires | head -c4)
  local month=$(echo $expires | head -c6 | tail -c2)
  local day=$(echo $expires | head -c8 | tail -c2)
  local expires_fmt="${year}-${month}-${day}"
  local expires_num=$(date -u -d $expires_fmt +%s)

  local now=$(/bin/date -u +%s)
  local valid_time=$(( ($expires_num-$now)/(3600*24) ))
  echo "Whitelist is valid for another $valid_time days"
}


is_local_upstream() {
  local upstream=$1

  if [ x$(echo "$upstream" | cut -d: -f1) = x"local" ]; then
    return 0
  else
    return 1
  fi
}


get_local_upstream() {
  local upstream=$1

  echo "$upstream" | cut -d: -f2
}


reload_apache() {
   echo -n "Reloading Apache... "
   ${SERVICE_BIN} ${APACHE} reload > /dev/null
   echo "done"
}


transaction() {
  local name=$1
  local spool_dir=$2

  [ -f ${spool_dir}/in_transaction ] && die "Already in a transaction"

  transaction_before_hook $name
  sudo mount -o remount,rw /cvmfs/$name
  touch ${spool_dir}/in_transaction
  transaction_after_hook $name
}


abort() {
  local name=$1
  local user=$2
  local spool_dir=$3

  [ -f ${spool_dir}/in_transaction ] || die "Not in a transaction"
  $fuser -m /cvmfs/$name > /dev/null 2>&1 && die "Open file descriptors on $name"

  reply=n
  read -p "You are about to DISCARD ALL CHANGES OF THE CURRENT TRANSACTION!  Are you sure (y/n)? " reply
  [ x"$reply" != xy ] && return

  local user_shell="sh -c"
  [ $(whoami) != $user ] && user_shell="sudo -H -u $user sh -c"

  abort_before_hook $name
  sudo umount /cvmfs/$name
  rm -rf ${spool_dir}/tmp/*
  sudo rm -rf ${spool_dir}/scratch
  $user_shell "mkdir /var/spool/cvmfs/${name}/scratch"
  sudo mount /cvmfs/$name
  rm -f ${spool_dir}/in_transaction
  abort_after_hook $name
}


publish() {
  local name=$1
  local user=$2
  local spool_dir=$3
  local stratum0=$4
  local upstream=$5
  local debug=${6:-0}

  local swissknife="cvmfs_swissknife"

  # enable the debug mode?
  if [ "$debug" -ne "0" ]
  then
    if [ -f /usr/bin/cvmfs_swissknife_debug ]; then
      case $debug in
        1)
          # in case something breaks we are provided with a GDB prompt.
          swissknife="gdb --quiet --eval-command=run --eval-command=quit --args cvmfs_swissknife_debug"
        ;;
        2)
          # attach gdb and provide a prompt WITHOUT actual running the program
          swissknife="gdb --quiet --args cvmfs_swissknife_debug"
        ;;
      esac
    else
      echo -e "WARNING: compile with CVMFS_SERVER_DEBUG to allow for debug mode!\nFalling back to release mode...."
    fi
  fi

  [ -f ${spool_dir}/in_transaction ] || die "Not in a transaction"
  $fuser -m /cvmfs/$name > /dev/null 2>&1 && die "Open file descriptors on $name"

  local user_shell="sh -c"
  [ $(whoami) != $user ] && user_shell="sudo -H -u $user sh -c"

  publish_before_hook $name
  sudo /bin/mount -o remount,ro /cvmfs/$name
  local base_hash=$(attr -qg root_hash ${spool_dir}/rdonly)
  local log_level=
  [ "x$CVMFS_LOG_LEVEL" != x ] && log_level="-z $CVMFS_LOG_LEVEL"

  local sync_command="$swissknife sync -x -u /cvmfs/$name \
    -s ${spool_dir}/scratch \
    -c ${spool_dir}/rdonly \
    -t ${spool_dir}/tmp \
    -b $base_hash \
    -r ${upstream},${spool_dir}/paths,${spool_dir}/digests \
    -w $stratum0 \
    -o ${spool_dir}/tmp/manifest \
    $log_level"
  local sign_command="$swissknife sign -c /etc/cvmfs/keys/${name}.crt \
    -k /etc/cvmfs/keys/${name}.key \
    -n $name \
    -m ${spool_dir}/tmp/manifest \
    -t ${spool_dir}/tmp \
    -r ${upstream},${spool_dir}/paths,${spool_dir}/digests"

  $user_shell "$sync_command" || die "Synchronization failed\n\nExecuted Command:\n$sync_command"
  $user_shell "$sign_command" || die "Signing failed\n\nExecuted Command:\n$sign_command"
  echo "Remounting newly created repository revision"
  sudo umount /cvmfs/$name
  sudo umount ${spool_dir}/rdonly
  sudo rm -rf ${spool_dir}/scratch
  rm -rf ${spool_dir}/tmp/*
  $user_shell "mkdir ${spool_dir}/scratch"
  sudo mount ${spool_dir}/rdonly > /dev/null
  sudo mount /cvmfs/$name
  rm -f ${spool_dir}/in_transaction
  publish_after_hook $name
}


snapshot() {
  local name=$1
  local user=$2
  local spool_dir=$3
  local stratum0=$4
  local upstream=$5
  local num_workers=$6
  local public_key=$7
  local timeout=$8
  local retries=$9

  local user_shell="sh -c"
  [ $(whoami) != $user ] && user_shell="sudo -H -u $user sh -c"

  local log_level=
  [ "x$CVMFS_LOG_LEVEL" != x ] && log_level="-z $CVMFS_LOG_LEVEL"
  local with_history=
  if [ -f /etc/cvmfs/repositories.d/{$name}/last_snapshot ]; then
    with_history="-p"
  else
    echo "Initial snapshot"
  fi

  $user_shell "cvmfs_swissknife pull -m $name \
    -u $stratum0 \
    -r ${upstream},${spool_dir}/paths,${spool_dir}/digests \
    -x ${spool_dir}/tmp \
    -k $public_key \
    -n $num_workers \
    -t $timeout \
    -a $retries $with_history $log_level"
  date > /etc/cvmfs/repositories.d/${name}/last_snapshot
}


create_repository_skeleton() {
  local directory=$1
  local user=$2

  echo -n "Creating repository skeleton in ${directory}..."
  mkdir -p ${directory}/data
  local i=0
  while [ $i -lt 256 ]
  do
    mkdir ${directory}/data/$(printf "%02x" $i)
    i=$(($i+1))
  done
  chown -R $user $directory
  echo "done"
}


get_cvmfs_owner() {
  local name=$1
  local owner=$2
  local cvmfs_owner

  if [ "x$owner" == "x" ]; then
    read -p "Owner of $name [$(whoami)]: " cvmfs_owner
    [ x"$cvmfs_owner" = x ] && cvmfs_owner=$(whoami)
  else
    cvmfs_owner=$owner
  fi
  id $cvmfs_owner > /dev/null 2>&1 || die "No user $cvmfs_owner"
  echo $cvmfs_owner
}


mkfs() {
  local name=$1
  local stratum0=$2
  local upstream=$3
  local owner=$4

  local cvmfs_user=`get_cvmfs_owner $name $owner`
  local spool_dir="/var/spool/cvmfs/${name}"
  local scratch_dir="${spool_dir}/scratch"
  local rdonly_dir="${spool_dir}/rdonly"
  local temp_dir="${spool_dir}/tmp"
  local cache_dir="${spool_dir}/cache"
  local pipe_paths="${spool_dir}/paths"
  local pipe_digests="${spool_dir}/digests"
  local repository_dir;
  if is_local_upstream $upstream; then
    repository_dir=$(get_local_upstream $upstream)
  fi

  # Sanity checks
  [ $(id -u) -ne 0 ] && die "Only root can create a new repository"
  /sbin/modprobe -q aufs || test -d /sys/fs/aufs || die "aufs kernel module missing"
  [ -x /usr/bin/cvmfs2 ] || die "cvmfs client missing"
  cat /proc/mounts | grep -q "^/etc/auto.cvmfs /cvmfs " && die "Autofs on /cvmfs has to be disabled"
  [ -d /etc/${APACHE} ] && ${SERVICE_BIN} ${APACHE} status >/dev/null || die "Apache must be installed and running"

  echo -n "Creating configuration files... "
  mkdir -p /etc/cvmfs/repositories.d/${name}
  cat > /etc/cvmfs/repositories.d/${name}/server.conf << EOF
# Created by cvmfs_server.
CVMFS_REPOSITORY_NAME=$name
CVMFS_REPOSITORY_TYPE=stratum0
CVMFS_USER=$cvmfs_user
CVMFS_UNION_DIR=/cvmfs/$name
CVMFS_SPOOL_DIR=$spool_dir
CVMFS_STRATUM0=$stratum0
CVMFS_UPSTREAM_STORAGE=$upstream
EOF
  cat > /etc/${APACHE}/conf.d/cvmfs.${name}.conf << EOF
# Created by cvmfs_server.  Don't touch.
# For pushing files to the worker nodes
Alias /fanout/cvmfs/$name /cvmfs/$name
<Directory "/cvmfs/$name">
    Options -MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all
    EnableMMAP Off
    EnableSendFile Off
</Directory>
# For pushing catalogs to upstream storage
Alias /fanout/$temp_dir $temp_dir
<Directory "$temp_dir">
    Options -MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all
    EnableMMAP Off
    EnableSendFile Off
</Directory>
EOF
  if is_local_upstream $upstream; then
    cat >> /etc/${APACHE}/conf.d/cvmfs.${name}.conf << EOF
# Translation URL to real pathname
Alias /cvmfs/$name ${repository_dir}
<Directory "${repository_dir}">
    Options -MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all

    EnableMMAP Off
    EnableSendFile Off

    AddType application/x-cvmfs .cvmfspublished .cvmfswhitelist

    Header unset Last-Modified
    FileETag None

    ExpiresActive On
    ExpiresDefault "access plus 3 days"
    ExpiresByType text/html "access plus 5 minutes"
    ExpiresByType application/x-cvmfs "access plus 1 minutes"
</Directory>
EOF
  fi
  cat > /etc/cvmfs/repositories.d/${name}/client.conf << EOF
# Created by cvmfs_server.  Don't touch.
CVMFS_CACHE_BASE=$cache_dir
CVMFS_RELOAD_SOCKETS=$cache_dir
CVMFS_QUOTA_LIMIT=4000
CVMFS_SERVER_URL=$stratum0
CVMFS_HTTP_PROXY=DIRECT
CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/${name}.pub
CVMFS_CHECK_PERMISSIONS=yes
CVMFS_IGNORE_SIGNATURE=no
CVMFS_AUTO_UPDATE=no
CVMFS_NFS_SOURCE=no
EOF
  cat >> /etc/sudoers << EOF
$cvmfs_user localhost = NOPASSWD: /bin/mount -o remount\,ro /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount -o remount\,rw /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/umount /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/umount $rdonly_dir # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount $rdonly_dir # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/rm -rf $scratch_dir # added by CernVM-FS for $name
EOF
  echo "done"

  mkdir -p /etc/cvmfs/keys
  create_master_key $name $cvmfs_user
  create_cert $name $cvmfs_user

  echo -n "Create CernVM-FS Storage... "
  mkdir -p /cvmfs/$name $scratch_dir $rdonly_dir $temp_dir $cache_dir
  mkfifo -m 0660 $pipe_paths $pipe_digests
  chown -R $cvmfs_user /cvmfs/$name $spool_dir
  if is_local_upstream $upstream; then
    create_repository_skeleton $repository_dir $cvmfs_user > /dev/null
  fi
  reload_apache > /dev/null
  echo "done"

  local spooler_definition="${upstream},${pipe_paths},${pipe_digests}"
  echo -n "Create Initial Repository... "
  create_whitelist $name $cvmfs_user $spooler_definition $temp_dir > /dev/null
  sudo -H -u $cvmfs_user sh -c "cvmfs_swissknife create \
    -t $temp_dir \
    -r $spooler_definition \
    -o ${temp_dir}/new_manifest" > /dev/null
  sudo -H -u $cvmfs_user sh -c "cvmfs_swissknife sign \
    -c /etc/cvmfs/keys/${name}.crt \
    -k /etc/cvmfs/keys/${name}.key \
    -n $name \
    -m ${temp_dir}/new_manifest \
    -t $temp_dir \
    -r $spooler_definition" > /dev/null
  echo "done"

  echo -n "Mounting CernVM-FS Storage... "
  cat >> /etc/fstab << EOF
cvmfs2#$name $rdonly_dir fuse allow_other,config=/etc/cvmfs/repositories.d/${name}/client.conf,cvmfs_suid 0 0 # added by CernVM-FS for $name
aufs_$name /cvmfs/$name aufs br=${scratch_dir}=rw:${rdonly_dir}=rr,udba=none,ro 0 0 # added by CernVM-FS for $name
EOF
  mount $rdonly_dir > /dev/null
  mount /cvmfs/$name
  echo "done"

  echo -n "Initial commit... "
  transaction $name $spool_dir > /dev/null
  echo "New CernVM-FS repository for $name" > /cvmfs/${name}/new_repository
  chown $cvmfs_user /cvmfs/${name}/new_repository
  publish $name $cvmfs_user $spool_dir $stratum0 $upstream > /dev/null
  cat $rdonly_dir/new_repository

  echo "\

Before you can install anything, call \`cvmfs_server transaction\`
to enable write access on your repository. Then install your
software in /cvmfs/$name as user $cvmfs_user.
Once you're happy, publish using \`cvmfs_server publish\`

For client configuration, have a look at 'cvmfs_server info'

If you go for production, backup you software signing keys in /etc/cvmfs/keys/!"
}


add_replica() {
  local name=$1
  local stratum0=$2
  local public_key=$3
  local upstream=$4
  local owner=$5

  local cvmfs_user=`get_cvmfs_owner $name $owner`
  local spool_dir="/var/spool/cvmfs/${name}"
  local pipe_paths="${spool_dir}/paths"
  local pipe_digests="${spool_dir}/digests"
  local temp_dir="${spool_dir}/tmp"
  local repository_dir;
  if is_local_upstream $upstream; then
    repository_dir=$(get_local_upstream $upstream)
  fi

  # Sanity checks
  [ $(id -u) -ne 0 ] && die "Only root can create a new repository"
  if is_local_upstream $upstream; then
    [ -d /etc/${APACHE} ] && ${SERVICE_BIN} ${APACHE} status >/dev/null || die "Apache must be installed and running"
  fi

  echo -n "Creating configuration files... "
  mkdir -p /etc/cvmfs/repositories.d/${name}
  cat > /etc/cvmfs/repositories.d/${name}/server.conf << EOF
# Created by cvmfs_server.
CVMFS_REPOSITORY_NAME=$name
CVMFS_REPOSITORY_TYPE=stratum1
CVMFS_USER=$cvmfs_user
CVMFS_SPOOL_DIR=$spool_dir
CVMFS_STRATUM0=$stratum0
CVMFS_UPSTREAM_STORAGE=$upstream
EOF
  cat > /etc/cvmfs/repositories.d/${name}/replica.conf << EOF
# Created by cvmfs_server.
CVMFS_NUM_WORKERS=16
CVMFS_PUBLIC_KEY=$public_key
CVMFS_HTTP_TIMEOUT=10
CVMFS_HTTP_RETRIES=3
EOF
  if is_local_upstream $upstream; then
    cat > /etc/${APACHE}/conf.d/cvmfs.${name}.conf << EOF
# Translation URL to real pathname
Alias /cvmfs/$name ${repository_dir}
<Directory "${repository_dir}">
    Options -MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all

    EnableMMAP Off
    EnableSendFile Off

    AddType application/x-cvmfs .cvmfspublished .cvmfswhitelist

    Header unset Last-Modified
    FileETag None

    ExpiresActive On
    ExpiresDefault "access plus 3 days"
    ExpiresByType text/html "access plus 5 minutes"
    ExpiresByType application/x-cvmfs "access plus 1 minutes"
</Directory>
EOF
  fi
  echo "done"

  echo -n "Create CernVM-FS Storage... "
  mkdir -p $spool_dir
  if [ x"$repository_dir" != x ]; then
    create_repository_skeleton $repository_dir $cvmfs_user > /dev/null
    mkdir $repository_dir/data/txn
    chown $cvmfs_user $repository_dir/data/txn
    ln -s $repository_dir/data/txn $temp_dir
  else
    mkdir -p $temp_dir
  fi
  mkfifo -m 0660 $pipe_paths $pipe_digests
  chown -R $cvmfs_user $spool_dir
  reload_apache > /dev/null
  echo "done"

  echo "\

Use 'cvmfs_server snapshot' to replicate $name.
Make sure to install the repository public key in /etc/cvmfs/keys/
You might have to add the key in /etc/cvmfs/repositories.d/${name}/replica.conf"
}


rmfs() {
  local name=$1
  local spool_dir=$2
  local upstream=$3
  local type=$4

  [ $(id -u) -ne 0 ] && die "Only root can remove a repository"
  [ x"$spool_dir" = x ] && die "Spool directory undefined"
  [ x"$upstream" = x ] && die "Upstream storage undefined"
  [ x"$type" = x ] && die "Repository type undefined"

  if [ "$type" == "stratum0" ]; then
    echo -n "Unmounting CernVM-FS Area... "
    sed -i -e "/added by CernVM-FS for ${name}/d" /etc/fstab
    mount | grep -q " /cvmfs/$name " && umount /cvmfs/$name
    mount | grep -q " ${spool_dir}/rdonly " && umount ${spool_dir}/rdonly
    if [ -d /cvmfs/$name ]; then 
      rmdir /cvmfs/$name
    fi
    echo "done"
  fi

  echo -n "Removing spool area... "
  rm -rf $spool_dir
  echo done

  if is_local_upstream $upstream; then
    local repository_dir=$(get_local_upstream $upstream)
    if [ "x"$repository_dir != x ]; then
      echo -n "Removing repository storage... "
      rm -rf $repository_dir
      echo "done"
    fi
  fi

  echo -n "Removing keys and configuration... "
  if [ "$type" == stratum0 ]; then
    rm -f /etc/cvmfs/keys/$name.masterkey \
        /etc/cvmfs/keys/$name.pub \
        /etc/cvmfs/keys/$name.key \
        /etc/cvmfs/keys/$name.crt
  fi
  if is_local_upstream $upstream; then
    rm -f /etc/${APACHE}/conf.d/cvmfs.${name}.conf
    reload_apache > /dev/null
  fi
  sed -i -e "/added by CernVM-FS for ${name}/d" /etc/sudoers
  rm -rf /etc/cvmfs/repositories.d/$name
  echo "done"

  echo "CernVM-FS repository $name wiped out!"
}


info() {
  local name=$1
  local stratum0=$2

  echo "Repository name: $name"
  get_expiry $name $stratum0
  echo

  echo "\
Client configuration:
Add $name to CVMFS_REPOSITORIES in /etc/cvmfs/default.local
Create /etc/cvmfs/config.d/${name}.conf and set
  CVMFS_SERVER_URL=$stratum0
  CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/${name}.pub
Copy /etc/cvmfs/keys/${name}.pub to the client"
}


check() {
  local name=$1
  local upstream=$2
  local repository_dir=$(get_local_upstream $upstream)

  [ "x$CVMFS_LOG_LEVEL" != x ] && log_level="-l $CVMFS_LOG_LEVEL"

  echo "Verifying $name"
  cvmfs_swissknife check -c $log_level -r $repository_dir
}


list_repositories() {
  for repository in /etc/cvmfs/repositories.d/*; do
    if [ "x$repository" = "x/etc/cvmfs/repositories.d/*" ]; then
      return 0
    fi
    . ${repository}/server.conf
    local name=$(basename $repository)
    echo "$name ($CVMFS_REPOSITORY_TYPE)"
  done
}


usage() {
   echo "\
CernVM-FS Server Tool
Commands:
  mkfs <fully qualified name> [-w stratum0 url] [-u upstream storage]
                              [-o owner]:
               Create a new repository with a given name
  add-replica <fully qualified name> <stratum 0 url> <public key>
               [-o owner] [-u stratum1 upstram storage]
               Create a Stratum 1 replica of a repository
  publish <fully qualified name> [-d debug mode | -D blocking debug mode]:
               Make a new repository snapshot
  rmfs <fully qualified name> [-f force]:
               Remove the repository
  resign:      Re-sign the 30 day whitelist
  list:        List available repositories
  info:        Print summary about the repository
  check:       Checks if the repository is sane
  transaction: Start to edit a repository
  abort:       Abort transaction and return to the state before
  snapshot:    Synchronize a Stratum 1 replica with the Stratum 0 source

Note: If multiple repositories are maintained, the repository name must follow
the command."
}


. /etc/cvmfs/config.sh
[ -f /etc/cvmfs/cvmfs_server_hooks.sh ] && . /etc/cvmfs/cvmfs_server_hooks.sh

# Setup environment
APACHE="httpd"
[ which apache2 >/dev/null 2>&1 ] && APACHE="apache2"
SERVICE_BIN=$(which service)
[ -z "$SERVICE_BIN" ] && die "Could not locate 'service' utility"

select_fqrn() {
  local given_name="$1"
  if [ x"$given_name" != x ]; then
    # Check if exists
    given_name=$(cvmfs_mkfqrn $given_name)
    [ -d /etc/cvmfs/repositories.d/$given_name ] && echo $given_name
  else
    # Check if only one repository active
    [ $(list_repositories | wc -l) -eq 1 ] && list_repositories | cut -d" " -f1
  fi
  return 0
}
CVMFS_REPOSITORY_NAME=$(select_fqrn $2)


case $1 in
  mkfs)
    [ x"$CVMFS_REPOSITORY_NAME" != x ] && die "There is already an active repository $CVMFS_REPOSITORY_NAME"
    CVMFS_REPOSITORY_NAME=$(cvmfs_mkfqrn $2)
    if [ x"$CVMFS_REPOSITORY_NAME" = x ]; then
      usage
      exit 2
    fi
    # Stratum 0, upstream storage
    STRATUM0="http://localhost/cvmfs/$CVMFS_REPOSITORY_NAME"
    UPSTREAM="local:/srv/cvmfs/$CVMFS_REPOSITORY_NAME"
    shift 2
    while getopts "w:u:o:" OPTION
    do
      case $OPTION in
        w)
          STRATUM0=$OPTARG
        ;;
        u)
          UPSTREAM=$OPTARG
        ;;
        o)
          OWNER=$OPTARG
        ;;
        ?)
          echo "Invalid option"
          exit 1
        ;;
      esac
    done
    mkfs $CVMFS_REPOSITORY_NAME $STRATUM0 $UPSTREAM $OWNER
    ;;
  add-replica)
    [ x"$CVMFS_REPOSITORY_NAME" != x ] && die "There is already an active repository $CVMFS_REPOSITORY_NAME"
    CVMFS_REPOSITORY_NAME=$(cvmfs_mkfqrn $2)
    CVMFS_STRATUM0=$3
    CVMFS_PUBLIC_KEY=$4
    if [ x"$CVMFS_REPOSITORY_NAME" = x -o x"$CVMFS_STRATUM0" = x -o x"$CVMFS_PUBLIC_KEY" = x ]; then
      usage
      exit 2
    fi
    UPSTREAM="local:/srv/cvmfs/$CVMFS_REPOSITORY_NAME"
    shift 4
    while getopts "o:u:" OPTION
    do
      case $OPTION in
        u)
          UPSTREAM=$OPTARG
        ;;
        o)
          OWNER=$OPTARG
        ;;
        ?)
          echo "Invalid option"
          exit 1
        ;;
      esac
    done
    add_replica $CVMFS_REPOSITORY_NAME $CVMFS_STRATUM0 $CVMFS_PUBLIC_KEY $UPSTREAM $OWNER
  ;;
  rmfs)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository?"
    reply=n
    if [ x"$3" == x"-f" ]; then
      reply=y
    else
      read -p "You are about to WIPE OUT THE CERNVM-FS REPOSITORY INCLUDING SIGNING KEYS!  Are you sure (y/n)? " reply
    fi
    if [ "$reply" = "y" ]; then
      . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
      rmfs $CVMFS_REPOSITORY_NAME $CVMFS_SPOOL_DIR $CVMFS_UPSTREAM_STORAGE $CVMFS_REPOSITORY_TYPE
    fi
  ;;
  resign)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository?"
    [ -f /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/replica.conf ] && die "This is not a stratum 0 repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    create_whitelist $CVMFS_REPOSITORY_NAME $CVMFS_USER \
      ${CVMFS_UPSTREAM_STORAGE},${CVMFS_SPOOL_DIR}/paths,${CVMFS_SPOOL_DIR}/digests \
      ${CVMFS_SPOOL_DIR}/tmp
  ;;
  list)
    list_repositories
  ;;
  info)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    [ -f /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/replica.conf ] && die "This is not a stratum 0 repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    info $CVMFS_REPOSITORY_NAME $CVMFS_STRATUM0
  ;;
  check)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    check $CVMFS_REPOSITORY_NAME $CVMFS_UPSTREAM_STORAGE
  ;;
  transaction)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    [ -f /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/replica.conf ] && die "This is not a stratum 0 repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    transaction $CVMFS_REPOSITORY_NAME $CVMFS_SPOOL_DIR
  ;;
  abort)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    [ -f /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/replica.conf ] && die "This is not a stratum 0 repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    abort $CVMFS_REPOSITORY_NAME $CVMFS_USER $CVMFS_SPOOL_DIR
  ;;
  publish)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    [ -f /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/replica.conf ] && die "This is not a stratum 0 repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf

    for last; do true; done # Shell-KungFu: find last command-line parameter of cvmfs_server invocation
    case $last in
      -d)
        DEBUG=1
      ;;
      -D)
        DEBUG=2
      ;;
      *)
        DEBUG=0
    esac

    publish $CVMFS_REPOSITORY_NAME $CVMFS_USER $CVMFS_SPOOL_DIR $CVMFS_STRATUM0 $CVMFS_UPSTREAM_STORAGE $DEBUG
  ;;
  snapshot)
    [ x"$CVMFS_REPOSITORY_NAME" = x ] && die "Which repository"
    [ -f /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/replica.conf ] || die "This is not a stratum 1 repository"
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/server.conf
    . /etc/cvmfs/repositories.d/${CVMFS_REPOSITORY_NAME}/replica.conf
    snapshot $CVMFS_REPOSITORY_NAME $CVMFS_USER $CVMFS_SPOOL_DIR $CVMFS_STRATUM0 \
      $CVMFS_UPSTREAM_STORAGE $CVMFS_NUM_WORKERS $CVMFS_PUBLIC_KEY \
      $CVMFS_HTTP_TIMEOUT $CVMFS_HTTP_RETRIES
  ;;
  skeleton)
    SKELETON_DIR=$2
    [ x"$SKELETON_DIR" = x ] && die "skeleton directory missing"
    read -p "Owner of $SKELETON_DIR [$(whoami)]: " SKELETON_USER
    [ x"$SKELETON_USER" = x ] && SKELETON_USER=$(whoami)
    id $SKELETON_USER > /dev/null 2>&1 || die "No user $SKELETON_USER"
    create_repository_skeleton $SKELETON_DIR $SKELETON_USER
  ;;
  snapshot)
    echo "TBD"
  ;;
  *)
    usage
  ;;
esac
