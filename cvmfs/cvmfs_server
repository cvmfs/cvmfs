#!/bin/sh
#
# This file is part of the CernVM File System
# This script takes care of creating, removing, and maintaining repositories
# on a Stratum 0/1 server

set -e # ESSENTIAL! Don't remove this!
       # Stops the server script in case anything unexpected occures, so that
       # malfunctions cause as less as possible damage.
       # For example a crashing `cvmfs_server publish` is prevented from wiping
       # the scratch area, giving us a chance to fix and retry the process.

die() {
  echo -e $1 >&2
  exit 1
}


################################################################################
#                                                                              #
#                              Environment Setup                               #
#                                                                              #
################################################################################


# setup server hooks: no-ops (overrideable by /etc/cvmfs/cvmfs_server_hooks.sh)
transaction_before_hook() { :; }
transaction_after_hook() { :; }
abort_before_hook() { :; }
abort_after_hook() { :; }
publish_before_hook() { :; }
publish_after_hook() { :; }

. /etc/cvmfs/config.sh
[ -f /etc/cvmfs/cvmfs_server_hooks.sh ] && . /etc/cvmfs/cvmfs_server_hooks.sh

# Find out about Apache's name
APACHE="httpd"
which apache2 >/dev/null 2>&1 && APACHE="apache2"

# Find the service binary
if [ -x /sbin/service ]; then
  SERVICE_BIN="/sbin/service"
else
  SERVICE_BIN="/usr/sbin/service" # Ubuntu
fi
[ -z "$SERVICE_BIN" ] && die "Could not locate 'service' utility"

# Find the fuser binary
if [ -x /sbin/fuser ]; then
  fuser="/sbin/fuser" # RHEL
else
  fuser="/bin/fuser"  # Ubuntu, SuSe
fi


################################################################################
#                                                                              #
#                              Utility Functions                               #
#                                                                              #
################################################################################


# checks if the given command name is a supported command of cvmfs_server
#
# @param subcommand   the subcommand to be called
# @return   0 if the command was recognized
is_subcommand() {
  subcommand=$1
  supported_commands="mkfs add-replica publish rmfs resign list info check transaction abort snapshot skeleton"
  for possible_command in $supported_commands; do
    if [ x"$possible_command" = x"$subcommand" ]; then
      return 0
    fi
  done

  return 1
}


# prints some help information optionally followed by an error message
# afterwards it aborts the script
#
# @param errormsg   an optional error message that is printed after the
#                   actual usage text
usage() {
  errormsg=$1

  echo "\
CernVM-FS Server Tool

Usage: cvmfs_server COMMAND [options] <parameters>

Supported Commands:
  mkfs          [-w stratum0 url] [-u upstream storage] [-o owner]
                <fully qualified repository name>
                Creates a new repository with a given name
  add-replica   [-u stratum1 upstream storage] [-o owner]
                <stratum 0 url> <public key>
                Creates a Stratum 1 replica of a Stratum 0 repository
  publish       [-d debug mode | -D blocking debug mode]
                <fully qualified name>
                Make a new repository snapshot
  rmfs          [-f don't ask again] 
                <fully qualified name>
                Remove the repository
  abort         [-f don't ask again]
                <fully qualified name>
                Abort transaction and return to the state before
  resign        <fully qualified name>
                Re-sign the 30 day whitelist
  info          <fully qualified name>
                Print summary about the repository
  check         <fully qualified name>
                Checks if the repository is sane
  transaction   <fully qualified name>
                Start to edit a repository
  snapshot      <fully qualified name>
                Synchronize a Stratum 1 replica with the Stratum 0 source
  list:         List available repositories
"


  if [ x"$errormsg" != x ]; then
    echo "\
________________________________________________________________________

NOTE: $errormsg
"
    exit 3
  else
    exit 2
  fi
}


# checks if the given repository name already exists
#
# @param given_name   the name of the repository to be checked
# @return             0 if the repository was found
check_repository_existence() {
  local given_name="$1"
  local fqrn

  # empty name is not allowed (and thus does not exist)
  if [ x"$given_name" = x ]; then
    return 1
  fi

  # Check if exists
  fqrn=$(cvmfs_mkfqrn $given_name)
  [ -d /etc/cvmfs/repositories.d/$fqrn ]
}


# checks if the running user is root
#
# @return   0 if the current user is root
is_root() {
  [ $(id -u) -eq 0 ]
}


# checks if a given repository is a stratum 0 repository
#
# @param name   the repository name to be checked
# @return       0 if it is a stratum 0 repository
is_stratum0() {
  local name=$1
  ! [ -f /etc/cvmfs/repositories.d/$name/replica.conf ]
}


# checks if a given repository is a stratum 1 repository
#
# @param name   the repository name to be checked
# @return       0 if it is a stratum 1 repository
is_stratum1() {
  local name=$1
  ! is_stratum0 $name
}


# checks if a user exists in the system
#
# @param user   the name of the user to be checked
# @return       0 if user was found
check_user() {
  local user=$1
  id $user > /dev/null 2>&1
}


is_local_upstream() {
  local upstream=$1

  if [ x$(echo "$upstream" | cut -d: -f1) = x"local" ]; then
    return 0
  else
    return 1
  fi
}


has_selinux() {
  [ -f /selinux/enforce ]
}


# checks if the right number of arguments was provided
# if the wrong number was provided it will kill the script after printing the
# usage text and an error message
#
# @param expected_parameter_count   number of expected parameters
# @param provided_parameter_count   number of provided parameters
check_parameter_count() {
  local expected_parameter_count=$1
  local provided_parameter_count=$2

  if [ $provided_parameter_count -lt $expected_parameter_count ]; then
    usage "Too few arguments provided"
  fi
  if [ $provided_parameter_count -gt $expected_parameter_count ]; then
    usage "Too many arguments provided"
  fi
}


# mangles the repository name into a fully qualified repository name
#
# @param repository_name       the repository name given by the user
# @return                      echoes the correct repository name to use
get_repository_name() {
  local repository_name=$1
  echo $(cvmfs_mkfqrn $repository_name)
}


# checks the parameter count for a situation where we might be able to guess
# the repository name based on the repositories present in the system
# Note: if the parameter count does not fit or if guessing is impossible,
#       this will print the usage string with an error message and exit
# Note: this method is commonly used right before invoking
#       `get_or_guess_repository_name` to check its preconditions and report
#       error before actually doing something wrong
#
# @param provided_parameter_count  number of parameters provided by the user
check_parameter_count_with_guessing() {
  local provided_parameter_count=$1

  if [ $provided_parameter_count -lt 1 ]; then
    # check if we have not _exactly_ one repository present
    if [ $(ls /etc/cvmfs/repositories.d/ | wc -l) -ne 1 ]; then
      usage "Please provide a repository name"
    fi
  fi

  if [ $provided_parameter_count -gt 1 ]; then
    usage "Too many arguments provided"
  fi
}


# mangles the repository name into a fully qualified repository name
# if there was no repository name given and there is only one repository present
# in the system, it automatically returns the name of this one.
#
# @param repository_name  the name of the repository to work on (might be empty)
# @return                 echoes a suitable repository name
get_or_guess_repository_name() {
  local repository_name=$1

  if [ "x$repository_name" = "x" ]; then
    echo $(get_repository_name $(ls /etc/cvmfs/repositories.d))
  else
    echo $(get_repository_name $repository_name)
  fi
}


create_master_key() {
  local name=$1
  local user=$2

  master_key="/etc/cvmfs/keys/$name.masterkey"
  master_pub="/etc/cvmfs/keys/$name.pub"

  echo -n "Creating CernVM-FS master key for $name in $master_pub... "
  openssl genrsa -out $master_key 2048 > /dev/null 2>&1
  openssl rsa -in $master_key -pubout -out $master_pub > /dev/null 2>&1
  chmod 444 $master_key $master_pub
  chown $user $master_key $master_pub
  echo "done"
}


create_cert() {
  local name=$1
  local user=$2

  local key; key="/etc/cvmfs/keys/$name.key"
  local csr; csr="/etc/cvmfs/keys/$name.csr"
  local crt; crt="/etc/cvmfs/keys/$name.crt"

  # Create self-signed certificate
  echo -n "Creating self-signed certificate for $name in $crt... "
  openssl genrsa -out $key 2048 > /dev/null 2>&1
  openssl req -new -subj "/C=/ST=/L=/O=/OU=/CN=$name CernVM-FS Release Managers" -key $key -out $csr > /dev/null 2>&1
  openssl x509 -req -days 365 -in $csr -signkey $key -out $crt > /dev/null 2>&1
  rm -f $csr
  chmod 444 $key $crt
  chown $user $master_key $master_pub
  echo "done"
}


create_whitelist() {
  local name=$1
  local user=$2
  local spooler_definition=$3
  local temp_dir=$4

  local whitelist
  whitelist=${temp_dir}/whitelist.$name

  echo -n "Signing 30 day whitelist with master key... "
  echo `date -u "+%Y%m%d%H%M%S"` > ${whitelist}.unsigned
  echo "E`date -u --date='next month' "+%Y%m%d%H%M%S"`" >> ${whitelist}.unsigned
  echo "N$name" >> ${whitelist}.unsigned
  openssl x509 -fingerprint -sha1 -in /etc/cvmfs/keys/${name}.crt | grep "SHA1 Fingerprint" | sed 's/SHA1 Fingerprint=//' >> ${whitelist}.unsigned

  local sha1; sha1=`openssl sha1 < ${whitelist}.unsigned | tr -d '\n' | tail -c40`
  echo "--" >> ${whitelist}.unsigned
  echo $sha1 >> ${whitelist}.unsigned
  echo -n $sha1 > ${whitelist}.sha1
  openssl rsautl -inkey /etc/cvmfs/keys/${name}.masterkey -sign -in ${whitelist}.sha1 -out ${whitelist}.signature
  cat ${whitelist}.unsigned ${whitelist}.signature > $whitelist
  chown $user $whitelist

  rm -f ${whitelist}.unsigned ${whitelist}.signature ${whitelist}.sha1
  cvmfs_swissknife upload -i $whitelist -o .cvmfswhitelist -r $spooler_definition
  rm -f $whitelist
  echo "done"
}


get_expiry() {
  local name=$1
  local stratum0=$2

  local expires=$(curl $stratum0/.cvmfswhitelist 2>/dev/null | head -2 | tail -1 | tail -c15)
  local year=$(echo $expires | head -c4)
  local month=$(echo $expires | head -c6 | tail -c2)
  local day=$(echo $expires | head -c8 | tail -c2)
  local expires_fmt="${year}-${month}-${day}"
  local expires_num=$(date -u -d $expires_fmt +%s)

  local now=$(/bin/date -u +%s)
  local valid_time=$(( ($expires_num-$now)/(3600*24) ))
  echo "Whitelist is valid for another $valid_time days"
}


get_local_upstream() {
  local upstream=$1

  echo "$upstream" | cut -d: -f2
}


reload_apache() {
   echo -n "Reloading Apache... "
   ${SERVICE_BIN} ${APACHE} reload > /dev/null
   echo "done"
}


# lowers restrictions of hardlink creation if needed
# allows AUFS to properly whiteout files without root privileges
# Note: this function requires sudo
lower_hardlink_restrictions() {
  if [ -f /proc/sys/kernel/yama/protected_nonaccess_hardlinks ] && \
     [ $(cat /proc/sys/kernel/yama/protected_nonaccess_hardlinks) -ne 0 ]; then
    # disable hardlink restrictions at runtime
    sysctl -w kernel.yama.protected_nonaccess_hardlinks=0 > /dev/null 2>&1 || return 1

    # change sysctl.conf to make the change persist reboots
    cat >> /etc/sysctl.conf << EOF

# added by CVMFS to allow proper whiteout of files in AUFS
# when creating or altering repositories on this machine.
kernel.yama.protected_nonaccess_hardlinks=0
EOF
    echo "Note: permanently disabled kernel option: kernel.yama.protected_nonaccess_hardlinks"
  fi

  return 0
}


# cvmfs requires a couple of apache modules to be enabled when running on
# an ubuntu machine. This enables these modules on an ubuntu installation
# Note: this function requires sudo
ensure_enabled_apache_modules() {
  which a2enmod > /dev/null 2>&1    || return 0
  which apache2ctl > /dev/null 2>&1 || return 0

  local restart=0
  local retcode=0
  local modules="headers expires"

  for module in $modules; do
    apache2ctl -M 2>/dev/null | grep -q "$module" && continue
    a2enmod $module > /dev/null 2>&1 || { echo "Warning: failed to enable apache2 module $module"; retcode=1; }
    restart=1
  done

  # restart apache if needed
  if [ $restart -ne 0 ]; then
    ${SERVICE_BIN} ${APACHE} restart > /dev/null 2>&1 | { echo "Warning: Failed to restart apache after enabling necessary modules"; retcode=2; }
  fi

  return $retcode
}


create_repository_skeleton() {
  local directory=$1
  local user=$2

  echo -n "Creating repository skeleton in ${directory}..."
  mkdir -p ${directory}/data
  local i=0
  while [ $i -lt 256 ]
  do
    mkdir ${directory}/data/$(printf "%02x" $i)
    i=$(($i+1))
  done
  chown -R $user $directory
  if has_selinux; then
    chcon -Rv --type=httpd_sys_content_t $directory
  fi
  echo "done"
}


get_cvmfs_owner() {
  local name=$1
  local owner=$2
  local cvmfs_owner

  if [ "x$owner" = "x" ]; then
    read -p "Owner of $name [$(whoami)]: " cvmfs_owner
    [ x"$cvmfs_owner" = x ] && cvmfs_owner=$(whoami)
  else
    cvmfs_owner=$owner
  fi
  check_user $cvmfs_user || return 1
  echo $cvmfs_owner
}


################################################################################
#                                                                              #
#                                Sub Commands                                  #
#                                                                              #
################################################################################


mkfs() {
  local name
  local stratum0
  local upstream
  local owner

  # parameter handling
  OPTIND=1
  while getopts "w:u:o:" option; do
    case $option in
      w)
        stratum0=$OPTARG
      ;;
      u)
        upstream=$OPTARG
      ;;
      o)
        owner=$OPTARG
      ;;
      ?)
        shift $(($OPTIND-2))
        usage "Command mkfs: Unrecognized option: $1"
      ;;
    esac
  done

  # get repository name
  shift $(($OPTIND-1))
  check_parameter_count 1 $#
  name=$(get_repository_name $1)

  # default values
  [ x"$stratum0" = x ] && stratum0="http://localhost/cvmfs/$name"
  [ x"$upstream" = x ] && upstream="local:/srv/cvmfs/$name"

  # sanity checks
  check_repository_existence $name && die "The repository $name already exists"
  is_root || die "Only root can create a new repository"

  # other configurations
  local cvmfs_user=`get_cvmfs_owner $name $owner`
  local spool_dir="/var/spool/cvmfs/${name}"
  local scratch_dir="${spool_dir}/scratch"
  local rdonly_dir="${spool_dir}/rdonly"
  local temp_dir="${spool_dir}/tmp"
  local cache_dir="${spool_dir}/cache"
  local pipe_paths="${spool_dir}/paths"
  local pipe_digests="${spool_dir}/digests"
  local repository_dir;
  if is_local_upstream $upstream; then
    repository_dir=$(get_local_upstream $upstream)
  fi

  # more sanity checks
  check_user $cvmfs_user || die "No user $cvmfs_user"
  /sbin/modprobe -q aufs || test -d /sys/fs/aufs || die "aufs kernel module missing"
  [ -x /usr/bin/cvmfs2 ] || die "cvmfs client missing"
  cat /proc/mounts | grep -q "^/etc/auto.cvmfs /cvmfs " && die "Autofs on /cvmfs has to be disabled"
  [ -d /etc/${APACHE} ] && ${SERVICE_BIN} ${APACHE} status >/dev/null || die "Apache must be installed and running"
  lower_hardlink_restrictions
  ensure_enabled_apache_modules

  echo -n "Creating configuration files... "
  mkdir -p /etc/cvmfs/repositories.d/${name}
  cat > /etc/cvmfs/repositories.d/${name}/server.conf << EOF
# Created by cvmfs_server.
CVMFS_REPOSITORY_NAME=$name
CVMFS_REPOSITORY_TYPE=stratum0
CVMFS_USER=$cvmfs_user
CVMFS_UNION_DIR=/cvmfs/$name
CVMFS_SPOOL_DIR=$spool_dir
CVMFS_STRATUM0=$stratum0
CVMFS_UPSTREAM_STORAGE=$upstream
EOF
  cat > /etc/${APACHE}/conf.d/cvmfs.${name}.conf << EOF
# Created by cvmfs_server.  Don't touch.
# For pushing files to the worker nodes
Alias /fanout/cvmfs/$name /cvmfs/$name
<Directory "/cvmfs/$name">
    Options -MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all
    EnableMMAP Off
    EnableSendFile Off
</Directory>
# For pushing catalogs to upstream storage
Alias /fanout/$temp_dir $temp_dir
<Directory "$temp_dir">
    Options -MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all
    EnableMMAP Off
    EnableSendFile Off
</Directory>
EOF
  if is_local_upstream $upstream; then
    cat >> /etc/${APACHE}/conf.d/cvmfs.${name}.conf << EOF
# Translation URL to real pathname
Alias /cvmfs/$name ${repository_dir}
<Directory "${repository_dir}">
    Options -MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all

    EnableMMAP Off
    EnableSendFile Off

    AddType application/x-cvmfs .cvmfspublished .cvmfswhitelist

    Header unset Last-Modified
    FileETag None

    ExpiresActive On
    ExpiresDefault "access plus 3 days"
    ExpiresByType text/html "access plus 5 minutes"
    ExpiresByType application/x-cvmfs "access plus 1 minutes"
</Directory>
EOF
  fi
  cat > /etc/cvmfs/repositories.d/${name}/client.conf << EOF
# Created by cvmfs_server.  Don't touch.
CVMFS_CACHE_BASE=$cache_dir
CVMFS_RELOAD_SOCKETS=$cache_dir
CVMFS_QUOTA_LIMIT=4000
CVMFS_SERVER_URL=$stratum0
CVMFS_HTTP_PROXY=DIRECT
CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/${name}.pub
CVMFS_CHECK_PERMISSIONS=yes
CVMFS_IGNORE_SIGNATURE=no
CVMFS_AUTO_UPDATE=no
CVMFS_NFS_SOURCE=no
EOF
  cat >> /etc/sudoers << EOF
$cvmfs_user localhost = NOPASSWD: /bin/mount -o remount\,ro /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount -o remount\,rw /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/umount /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/umount $rdonly_dir # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount $rdonly_dir # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/mount /cvmfs/$name # added by CernVM-FS for $name
$cvmfs_user localhost = NOPASSWD: /bin/rm -rf $scratch_dir # added by CernVM-FS for $name
EOF
  echo "done"

  mkdir -p /etc/cvmfs/keys
  create_master_key $name $cvmfs_user
  create_cert $name $cvmfs_user

  echo -n "Create CernVM-FS Storage... "
  mkdir -p /cvmfs/$name $scratch_dir $rdonly_dir $temp_dir $cache_dir
  mkfifo -m 0660 $pipe_paths $pipe_digests
  chown -R $cvmfs_user /cvmfs/$name $spool_dir
  if is_local_upstream $upstream; then
    create_repository_skeleton $repository_dir $cvmfs_user > /dev/null
  fi
  reload_apache > /dev/null
  echo "done"

  local spooler_definition="${upstream},${pipe_paths},${pipe_digests}"
  echo -n "Create Initial Repository... "
  create_whitelist $name $cvmfs_user $spooler_definition $temp_dir > /dev/null
  sudo -H -u $cvmfs_user sh -c "cvmfs_swissknife create \
    -t $temp_dir \
    -r $spooler_definition \
    -o ${temp_dir}/new_manifest" > /dev/null
  sudo -H -u $cvmfs_user sh -c "cvmfs_swissknife sign \
    -c /etc/cvmfs/keys/${name}.crt \
    -k /etc/cvmfs/keys/${name}.key \
    -n $name \
    -m ${temp_dir}/new_manifest \
    -t $temp_dir \
    -r $spooler_definition" > /dev/null
  echo "done"

  echo -n "Mounting CernVM-FS Storage... "
  local selinux_context=""
  if has_selinux; then
    selinux_context="context=\"system_u:object_r:default_t:s0\""
  fi
  cat >> /etc/fstab << EOF
cvmfs2#$name $rdonly_dir fuse allow_other,config=/etc/cvmfs/repositories.d/${name}/client.conf,cvmfs_suid 0 0 # added by CernVM-FS for $name
aufs_$name /cvmfs/$name aufs br=${scratch_dir}=rw:${rdonly_dir}=rr,udba=none,ro,$selinux_context 0 0 # added by CernVM-FS for $name
EOF
  mount $rdonly_dir > /dev/null
  mount /cvmfs/$name
  echo "done"

  echo -n "Initial commit... "
  transaction $name > /dev/null
  echo "New CernVM-FS repository for $name" > /cvmfs/${name}/new_repository
  chown $cvmfs_user /cvmfs/${name}/new_repository
  publish $name > /dev/null
  cat $rdonly_dir/new_repository

  echo "\

Before you can install anything, call \`cvmfs_server transaction\`
to enable write access on your repository. Then install your
software in /cvmfs/$name as user $cvmfs_user.
Once you're happy, publish using \`cvmfs_server publish\`

For client configuration, have a look at 'cvmfs_server info'

If you go for production, backup you software signing keys in /etc/cvmfs/keys/!"
}


################################################################################


add_replica() {
  local name
  local stratum0
  local public_key
  local upstream
  local owner
  local is_master_replica

  # optional parameter handling
  OPTIND=1
  while getopts "o:u:" option
  do
    case $option in
      u)
        upstream=$OPTARG
      ;;
      o)
        owner=$OPTARG
      ;;
      ?)
        shift $(($OPTIND-2))
        usage "Command add-replica: Unrecognized option: $1"
      ;;
    esac
  done

   # get stratum0 url and path of public key
  shift $(($OPTIND-1))
  check_parameter_count 2 $#

  stratum0=$1
  public_key=$2

  name=$(cvmfs_swissknife info -r $stratum0 -n 2>/dev/null) || die "Failed to access Stratum0 repository at $stratum0"

  # sanity checks
  is_master_replica=$(cvmfs_swissknife info -r $stratum0 -m 2>/dev/null)
  [ "x$is_master_replica" != "xtrue" ] && die "The repository URL $stratum0 does not point to a replicable master copy of $name"
  if check_repository_existence $name; then
    if is_stratum0 $name; then
      die "Repository $name already exists as a Stratum0 repository.\nYou cannot create a Stratum1 replica for $name on this machine."
    else
      die "There is already a Stratum1 repository $name"
    fi
  fi

  # default values
  [ x"$upstream" = x ] && upstream="local:/srv/cvmfs/$name"

  # additional configuration
  local cvmfs_user=`get_cvmfs_owner $name $owner`
  local spool_dir="/var/spool/cvmfs/${name}"
  local pipe_paths="${spool_dir}/paths"
  local pipe_digests="${spool_dir}/digests"
  local temp_dir="${spool_dir}/tmp"
  local repository_dir;
  if is_local_upstream $upstream; then
    repository_dir=$(get_local_upstream $upstream)
  fi

  # additional sanity checks
  is_root || die "Only root can create a new repository"
  check_user $cvmfs_user || die "No user $cvmfs_user"
  if is_local_upstream $upstream; then
    [ -d /etc/${APACHE} ] && ${SERVICE_BIN} ${APACHE} status >/dev/null || die "Apache must be installed and running"
  fi

  echo -n "Creating configuration files... "
  mkdir -p /etc/cvmfs/repositories.d/${name}
  cat > /etc/cvmfs/repositories.d/${name}/server.conf << EOF
# Created by cvmfs_server.
CVMFS_REPOSITORY_NAME=$name
CVMFS_REPOSITORY_TYPE=stratum1
CVMFS_USER=$cvmfs_user
CVMFS_SPOOL_DIR=$spool_dir
CVMFS_STRATUM0=$stratum0
CVMFS_UPSTREAM_STORAGE=$upstream
EOF
  cat > /etc/cvmfs/repositories.d/${name}/replica.conf << EOF
# Created by cvmfs_server.
CVMFS_NUM_WORKERS=16
CVMFS_PUBLIC_KEY=$public_key
CVMFS_HTTP_TIMEOUT=10
CVMFS_HTTP_RETRIES=3
EOF
  if is_local_upstream $upstream; then
    cat > /etc/${APACHE}/conf.d/cvmfs.${name}.conf << EOF
# Translation URL to real pathname
Alias /cvmfs/$name ${repository_dir}
<Directory "${repository_dir}">
    Options -MultiViews
    AllowOverride All
    Order allow,deny
    Allow from all

    EnableMMAP Off
    EnableSendFile Off

    AddType application/x-cvmfs .cvmfspublished .cvmfswhitelist

    Header unset Last-Modified
    FileETag None

    ExpiresActive On
    ExpiresDefault "access plus 3 days"
    ExpiresByType text/html "access plus 5 minutes"
    ExpiresByType application/x-cvmfs "access plus 1 minutes"
</Directory>
EOF
  fi
  echo "done"

  echo -n "Create CernVM-FS Storage... "
  mkdir -p $spool_dir
  if [ x"$repository_dir" != x ]; then
    create_repository_skeleton $repository_dir $cvmfs_user > /dev/null
    mkdir $repository_dir/data/txn
    chown $cvmfs_user $repository_dir/data/txn
    ln -s $repository_dir/data/txn $temp_dir
  else
    mkdir -p $temp_dir
  fi
  mkfifo -m 0660 $pipe_paths $pipe_digests
  chown -R $cvmfs_user $spool_dir
  reload_apache > /dev/null
  echo "done"

  echo "\

Use 'cvmfs_server snapshot' to replicate $name.
Make sure to install the repository public key in /etc/cvmfs/keys/
You might have to add the key in /etc/cvmfs/repositories.d/${name}/replica.conf"
}


################################################################################


rmfs() {
  local name
  local spool_dir
  local upstream
  local type
  local force=0

  # optional parameter handling
  OPTIND=1
  while getopts "f" option
  do
    case $option in
      f)
        force=1
      ;;
      ?)
        shift $(($OPTIND-2))
        usage "Command rmfs: Unrecognized option: $1"
      ;;
    esac
  done

  # get repository name
  shift $(($OPTIND-1))
  check_parameter_count_with_guessing $#
  name=$(get_or_guess_repository_name $1)

  # sanity checks
  is_root || die "Only root can remove a repository"
  check_repository_existence $name || die "The repository $name does not exist"

  # better ask the user again!
  if [ $force -ne 1 ]; then
    local reply
    read -p "You are about to WIPE OUT THE CERNVM-FS REPOSITORY $name INCLUDING SIGNING KEYS!  Are you sure (y/N)? " reply
    if [ "$reply" != "y" ] && [ "$reply" != "Y" ]; then
      return 1
    fi
  fi

  # get information about repository
  . /etc/cvmfs/repositories.d/$name/server.conf
  spool_dir=$CVMFS_SPOOL_DIR
  upstream=$CVMFS_UPSTREAM_STORAGE
  type=$CVMFS_REPOSITORY_TYPE

  # do it!
  ensure_enabled_apache_modules

  [ x"$spool_dir" = x ] && die "Spool directory undefined"
  [ x"$upstream" = x ] && die "Upstream storage undefined"
  [ x"$type" = x ] && die "Repository type undefined"

  if [ "$type" = "stratum0" ]; then
    echo -n "Unmounting CernVM-FS Area... "
    sed -i -e "/added by CernVM-FS for ${name}/d" /etc/fstab
    mount | grep -q " /cvmfs/$name " && umount /cvmfs/$name
    mount | grep -q " ${spool_dir}/rdonly " && umount ${spool_dir}/rdonly
    if [ -d /cvmfs/$name ]; then 
      rmdir /cvmfs/$name
    fi
    echo "done"
  fi

  echo -n "Removing spool area... "
  rm -rf $spool_dir
  echo done

  if is_local_upstream $upstream; then
    local repository_dir=$(get_local_upstream $upstream)
    if [ "x"$repository_dir != x ]; then
      echo -n "Removing repository storage... "
      rm -rf $repository_dir
      echo "done"
    fi
  fi

  echo -n "Removing keys and configuration... "
  if [ "$type" = stratum0 ]; then
    rm -f /etc/cvmfs/keys/$name.masterkey \
        /etc/cvmfs/keys/$name.pub \
        /etc/cvmfs/keys/$name.key \
        /etc/cvmfs/keys/$name.crt
  fi
  if is_local_upstream $upstream; then
    rm -f /etc/${APACHE}/conf.d/cvmfs.${name}.conf
    reload_apache > /dev/null
  fi
  sed -i -e "/added by CernVM-FS for ${name}/d" /etc/sudoers
  rm -rf /etc/cvmfs/repositories.d/$name
  echo "done"

  echo "CernVM-FS repository $name wiped out!"
}


################################################################################


resign() {
  local name

  # get repository name
  check_parameter_count_with_guessing $#
  name=$(get_or_guess_repository_name $1)

  # sanity checks
  check_repository_existence $name || die "The repository $name does not exist"
  is_root || die "Only root can resign repositories"
  is_stratum0 $name || die "This is not a stratum 0 repository ($name)"
  
  # get repository information
  . /etc/cvmfs/repositories.d/$name/server.conf

  # do it!
  create_whitelist $name $CVMFS_USER \
      ${CVMFS_UPSTREAM_STORAGE},${CVMFS_SPOOL_DIR}/paths,${CVMFS_SPOOL_DIR}/digests \
      ${CVMFS_SPOOL_DIR}/tmp
}


################################################################################


info() {
  local name
  local stratum0

  # get repository name
  check_parameter_count_with_guessing $#
  name=$(get_or_guess_repository_name $1)

  echo $name

  # sanity checks
  check_repository_existence $name || die "The repository $name does not exist"
  is_stratum0 $name || die "This is not a stratum 0 repository"
  
  # get repository information
  . /etc/cvmfs/repositories.d/$name/server.conf
  stratum0=$CVMFS_STRATUM0

  # do it!
  echo "Repository name: $name"
  get_expiry $name $stratum0
  echo

  echo "\
Client configuration:
Add $name to CVMFS_REPOSITORIES in /etc/cvmfs/default.local
Create /etc/cvmfs/config.d/${name}.conf and set
  CVMFS_SERVER_URL=$stratum0
  CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/${name}.pub
Copy /etc/cvmfs/keys/${name}.pub to the client"
}


################################################################################


check() {
  local name
  local upstream
  local repository_dir

  # get repository name
  check_parameter_count_with_guessing $#
  name=$(get_or_guess_repository_name $1)

  # sanity checks
  check_repository_existence $name || die "The repository $name does not exist"
  
  # get repository information
  . /etc/cvmfs/repositories.d/$name/server.conf
  upstream=$CVMFS_UPSTREAM_STORAGE
  repository_dir=$(get_local_upstream $upstream)

  # do it!
  [ "x$CVMFS_LOG_LEVEL" != x ] && log_level="-l $CVMFS_LOG_LEVEL"

  echo "Verifying $name"
  cvmfs_swissknife check -c $log_level -r $repository_dir
}


################################################################################


list() {
  for repository in /etc/cvmfs/repositories.d/*; do
    if [ "x$repository" = "x/etc/cvmfs/repositories.d/*" ]; then
      return 0
    fi
    . ${repository}/server.conf
    local name=$(basename $repository)
    echo "$name ($CVMFS_REPOSITORY_TYPE)"
  done
}


################################################################################


transaction() {
  local name
  local spool_dir

  # get repository name
  check_parameter_count_with_guessing $#
  name=$(get_or_guess_repository_name $1)

  # sanity checks
  check_repository_existence $name || die "The repository $name does not exist"
  is_stratum0 $name || die "This is not a stratum 0 repository"
  
  # get repository information
  . /etc/cvmfs/repositories.d/$name/server.conf
  spool_dir=$CVMFS_SPOOL_DIR

  # more sanity checks
  [ -f ${spool_dir}/in_transaction ] && die "Repository $name in already in a transaction"

  # do it!
  transaction_before_hook $name
  sudo mount -o remount,rw /cvmfs/$name
  touch ${spool_dir}/in_transaction
  transaction_after_hook $name
}


################################################################################


abort() {
  local name
  local user
  local spool_dir
  local force=0

  # optional parameter handling
  OPTIND=1
  while getopts "f" option
  do
    case $option in
      f)
        force=1
      ;;
      ?)
        shift $(($OPTIND-2))
        usage "Command abort: Unrecognized option: $1"
      ;;
    esac
  done

  # get repository name
  shift $(($OPTIND-1))
  check_parameter_count_with_guessing $#
  name=$(get_or_guess_repository_name $1)

  # sanity checks
  check_repository_existence $name || die "The repository $name does not exist"
  is_stratum0 $name || die "This is not a stratum 0 repository"

  # get repository information
  . /etc/cvmfs/repositories.d/$name/server.conf
  user=$CVMFS_USER
  spool_dir=$CVMFS_SPOOL_DIR

  # more sanity checks
  [ -f ${spool_dir}/in_transaction ] || die "Not in a transaction"
  $fuser -m /cvmfs/$name > /dev/null 2>&1 && die "Open file descriptors on $name"

  # better ask the user once again!
  if [ $force -ne 1 ]; then
    local reply
    read -p "You are about to DISCARD ALL CHANGES OF THE CURRENT TRANSACTION for $name!  Are you sure (y/N)? " reply
    if [ "$reply" != "y" ] && [ "$reply" != "Y" ]; then
      return 1
    fi
  fi

  # do it!
  local user_shell="sh -c"
  [ $(whoami) != $user ] && user_shell="sudo -H -u $user sh -c"

  abort_before_hook $name
  sudo umount /cvmfs/$name
  rm -rf ${spool_dir}/tmp/*
  sudo rm -rf ${spool_dir}/scratch
  $user_shell "mkdir /var/spool/cvmfs/${name}/scratch"
  sudo mount /cvmfs/$name
  rm -f ${spool_dir}/in_transaction
  abort_after_hook $name
}


################################################################################


publish() {
  local name
  local user
  local spool_dir
  local stratum0
  local upstream
  local debug=0

  # optional parameter handling
  OPTIND=1
  while getopts "dD" option
  do
    case $option in
      d)
        debug=1
      ;;
      D)
        debug=2
      ;;
      ?)
        shift $(($OPTIND-2))
        usage "Command publish: Unrecognized option: $1"
      ;;
    esac
  done

  # get repository name
  shift $(($OPTIND-1))
  check_parameter_count_with_guessing $#
  name=$(get_or_guess_repository_name $1)

  # sanity checks
  check_repository_existence $name || die "The repository $name does not exist"
  is_stratum0 $name || die "This is not a stratum 0 repository"

  # get repository information
  . /etc/cvmfs/repositories.d/$name/server.conf
  user=$CVMFS_USER
  spool_dir=$CVMFS_SPOOL_DIR
  stratum0=$CVMFS_STRATUM0
  upstream=$CVMFS_UPSTREAM_STORAGE

  # more sanity checks
  [ -f ${spool_dir}/in_transaction ] || die "Not in a transaction"
  $fuser -m /cvmfs/$name > /dev/null 2>&1 && die "Open file descriptors on $name"

  # do it!
  local swissknife="cvmfs_swissknife"

  # enable the debug mode?
  if [ $debug -ne 0 ]
  then
    if [ -f /usr/bin/cvmfs_swissknife_debug ]; then
      case $debug in
        1)
          # in case something breaks we are provided with a GDB prompt.
          swissknife="gdb --quiet --eval-command=run --eval-command=quit --args cvmfs_swissknife_debug"
        ;;
        2)
          # attach gdb and provide a prompt WITHOUT actual running the program
          swissknife="gdb --quiet --args cvmfs_swissknife_debug"
        ;;
      esac
    else
      echo -e "WARNING: compile with CVMFS_SERVER_DEBUG to allow for debug mode!\nFalling back to release mode...."
    fi
  fi

  local user_shell="sh -c"
  [ $(whoami) != $user ] && user_shell="sudo -H -u $user sh -c"

  publish_before_hook $name
  sudo /bin/mount -o remount,ro /cvmfs/$name
  local base_hash=$(attr -qg root_hash ${spool_dir}/rdonly)
  local log_level=
  [ "x$CVMFS_LOG_LEVEL" != x ] && log_level="-z $CVMFS_LOG_LEVEL"

  local sync_command="$swissknife sync -x -u /cvmfs/$name \
    -s ${spool_dir}/scratch \
    -c ${spool_dir}/rdonly \
    -t ${spool_dir}/tmp \
    -b $base_hash \
    -r ${upstream},${spool_dir}/paths,${spool_dir}/digests \
    -w $stratum0 \
    -o ${spool_dir}/tmp/manifest \
    $log_level"
  local sign_command="$swissknife sign -c /etc/cvmfs/keys/${name}.crt \
    -k /etc/cvmfs/keys/${name}.key \
    -n $name \
    -m ${spool_dir}/tmp/manifest \
    -t ${spool_dir}/tmp \
    -r ${upstream},${spool_dir}/paths,${spool_dir}/digests"

  $user_shell "$sync_command" || die "Synchronization failed\n\nExecuted Command:\n$sync_command"
  $user_shell "$sign_command" || die "Signing failed\n\nExecuted Command:\n$sign_command"
  echo "Remounting newly created repository revision"
  sudo umount /cvmfs/$name
  sudo umount ${spool_dir}/rdonly
  sudo rm -rf ${spool_dir}/scratch
  rm -rf ${spool_dir}/tmp/*
  $user_shell "mkdir ${spool_dir}/scratch"
  sudo mount ${spool_dir}/rdonly > /dev/null
  sudo mount /cvmfs/$name
  rm -f ${spool_dir}/in_transaction
  publish_after_hook $name
}


################################################################################


snapshot() {
  local name
  local user
  local spool_dir
  local stratum0
  local upstream
  local num_workers
  local public_key
  local timeout
  local retries

  # get repository name
  check_parameter_count_with_guessing $#
  name=$(get_or_guess_repository_name $1)

  # sanity checks
  check_repository_existence $name || die "The repository $name does not exist"
  is_stratum1 $name || die "This is not a stratum 1 repository"

  # get repository information
  . /etc/cvmfs/repositories.d/$name/server.conf
  . /etc/cvmfs/repositories.d/$name/replica.conf
  user=$CVMFS_USER
  spool_dir=$CVMFS_SPOOL_DIR
  stratum0=$CVMFS_STRATUM0
  upstream=$CVMFS_UPSTREAM_STORAGE
  num_workers=$CVMFS_NUM_WORKERS
  public_key=$CVMFS_PUBLIC_KEY
  timeout=$CVMFS_HTTP_TIMEOUT
  retries=$CVMFS_HTTP_RETRIES

  # do it!
  local user_shell="sh -c"
  [ $(whoami) != $user ] && user_shell="sudo -H -u $user sh -c"

  local log_level=
  [ "x$CVMFS_LOG_LEVEL" != x ] && log_level="-z $CVMFS_LOG_LEVEL"
  local with_history=
  if [ -f /etc/cvmfs/repositories.d/{$name}/last_snapshot ]; then
    with_history="-p"
  else
    echo "Initial snapshot"
  fi

  $user_shell "cvmfs_swissknife pull -m $name \
    -u $stratum0 \
    -r ${upstream},${spool_dir}/paths,${spool_dir}/digests \
    -x ${spool_dir}/tmp \
    -k $public_key \
    -n $num_workers \
    -t $timeout \
    -a $retries $with_history $log_level"
  date > /etc/cvmfs/repositories.d/${name}/last_snapshot
}


################################################################################


skeleton() {
  local skeleton_dir
  local skeleton_user

  # get skeleton destination directory
  if [ $# -eq 0 ]; then
    die "Command skeleton: Please provide a skeleton destination directory"
  fi
  if [ $# -gt 1 ]; then
    die "Command skeleton: Too many arguments"
  fi
  skeleton_dir=$1

  # ask for the skeleton dir owern
  read -p "Owner of $skeleton_dir [$(whoami)]: " skeleton_user

  # default values
  [ x"$skeleton_user" = x ] && skeleton_user=$(whoami)

  # sanity checks
  check_user $skeleton_user || die "No user $skeleton_user"
  
  # do it!
  create_repository_skeleton $skeleton_dir $skeleton_user
}


################################################################################
#                                                                              #
#                                Entry Point                                   #
#                                                                              #
################################################################################


# check if there is at least a selected sub-command
if [ $# -lt 1 ]; then
  usage
fi

# check if the given sub-command is known and, if so, call it
subcommand=$1
shift
if is_subcommand $subcommand; then
  # replace a dash (-) by an underscore (_) and call the requested sub-command
  eval "$(echo $subcommand | sed 's/-/_/g') $@"
else
  usage "Unrecognized command: $subcommand"
fi
