#!/bin/bash

cvmfs_test_name="Garbage Collection With Named Tag Awareness"
cvmfs_test_autofs_on_startup=false

inflate_file() {
  local destination_file=$1
  local source_file=$2
  local desired_file_size=$3

  touch $destination_file
  while [ $(stat -c %s $destination_file) -lt $desired_file_size ]; do
    cat $source_file >> $destination_file
  done
}

produce_files_1_in() {
  local working_dir=$1
  pushdir $working_dir

  mkdir dir1
  mkdir dir1/sub1
  touch dir1/sub1/.cvmfscatalog
  mkdir dir1/sub2
  touch dir1/sub2/.cvmfscatalog
  mkdir dir1/sub3
  touch dir1/sub3/.cvmfscatalog

  touch dir1/shakespeare
  echo "That thou art blamed shall not be thy defect,"       >> dir1/shakespeare
  echo "For slander's mark was ever yet the fair;"           >> dir1/shakespeare
  echo "The ornament of beauty is suspect,"                  >> dir1/shakespeare
  echo "A crow that flies in heaven's sweetest air."         >> dir1/shakespeare
  echo "So thou be good, slander doth but approve"           >> dir1/shakespeare
  echo "Thy worth the greater, being wooed of time;"         >> dir1/shakespeare
  echo "For canker vice the sweetest buds doth love,"        >> dir1/shakespeare
  echo "And thou present'st a pure unstained prime."         >> dir1/shakespeare
  echo "Thou hast passed by the ambush of young days"        >> dir1/shakespeare
  echo "Either not assailed, or victor being charged;"       >> dir1/shakespeare
  echo "Yet this thy praise cannot be so thy praise,"        >> dir1/shakespeare
  echo "To tie up envy, evermore enlarged,"                  >> dir1/shakespeare
  echo "   If some suspect of ill masked not thy show,"      >> dir1/shakespeare
  echo "   Then thou alone kingdoms of hearts shouldst owe." >> dir1/shakespeare

  touch dir1/sub1/many_shakespeares
  touch dir1/sub2/alotof_shakespeares
  touch dir1/sub3/shakespeare_army
  inflate_file dir1/sub1/many_shakespeares dir1/shakespeare              1000000
  inflate_file dir1/sub2/alotof_shakespeares dir1/sub1/many_shakespeares 10000000
  inflate_file dir1/sub3/shakespeare_army dir1/sub2/alotof_shakespeares  50000000

  popdir
}

produce_files_2_in() {
  local working_dir=$1
  pushdir $working_dir

  mkdir dir2
  mkdir dir2/sub1
  touch dir2/sub1/.cvmfscatalog
  mkdir dir2/sub2
  touch dir2/sub2/.cvmfscatalog
  mkdir dir2/sub3
  touch dir2/sub3/.cvmfscatalog

  cp_bin dir2/sub1
  cp_bin dir2/sub2
  cp_bin dir2/sub3

  touch dir1/sub1/warfield
  echo "Our life is like a thorny rose"                                                   >> dir1/sub1/warfield
  echo "Not perfect, but always beautiful"                                                >> dir1/sub1/warfield
  echo "The thorns represent the hardships in our lives. "                                >> dir1/sub1/warfield
  echo "The delicate red petals represent the fun and beautiful things in our .........." >> dir1/sub1/warfield

  touch dir1/sub2/jackson
  echo "Didn't want a battle,"                                >> dir1/sub2/jackson
  echo "Yet you declared war,"                                >> dir1/sub2/jackson
  echo "Each knock you gave me made me stronger than before," >> dir1/sub2/jackson
  echo "I will not give up,"                                  >> dir1/sub2/jackson
  echo "I will not give in,"                                  >> dir1/sub2/jackson
  echo "You won't make me fall,"                              >> dir1/sub2/jackson
  echo "I won't let you win."                                 >> dir1/sub2/jackson

  popdir
}

produce_files_3_in() {
  local working_dir=$1
  pushdir $working_dir

  mkdir dir3
  cp_bin dir3

  mkdir dir3/sub1
  touch dir3/sub1/.cvmfscatalog
  mkdir dir3/sub2
  touch dir3/sub2/.cvmfscatalog
  mkdir dir3/sub3
  touch dir3/sub3/.cvmfscatalog

  touch dir3/kafka
  echo "Deeply lost in the night."                                   >> dir3/kafka
  echo ""                                                            >> dir3/kafka
  echo "Just as one sometimes lowers one's head to reflect, "        >> dir3/kafka
  echo "thus to be utterly lost in the night. "                      >> dir3/kafka
  echo "All around people are asleep. It's just play acting, "       >> dir3/kafka
  echo "an innocent self-deception, that they sleep in houses, "     >> dir3/kafka
  echo "in safe beds, under a safe roof, stretched out or "          >> dir3/kafka
  echo "curled up on mattresses, in sheets, under blankets; "        >> dir3/kafka
  echo "in reality they have flocked together as they had once "     >> dir3/kafka
  echo "upon a time and again later in a deserted region, a camp "   >> dir3/kafka
  echo "in the open, a countless number of men, an army, a people, " >> dir3/kafka
  echo "under a cold sky on cold earth, collapsed where once they "  >> dir3/kafka
  echo "had stood, forehead pressed on the arm, face to the "        >> dir3/kafka
  echo "ground, breathing quietly."                                  >> dir3/kafka
  echo ""                                                            >> dir3/kafka
  echo "And you are watching, are one of the watchmen, you find "    >> dir3/kafka
  echo "the next one by brandishing a burning stick from the "       >> dir3/kafka
  echo "brushwood pile beside you."                                  >> dir3/kafka
  echo ""                                                            >> dir3/kafka
  echo "Why are you watching?"                                       >> dir3/kafka
  echo ""                                                            >> dir3/kafka
  echo "Someone must watch, it is said. Someone must be there."      >> dir3/kafka

  touch dir3/sub1/many_kafkas
  touch dir3/sub2/alotof_kafkas
  touch dir3/sub3/kafka_army
  inflate_file dir3/sub1/many_kafkas dir3/kafka              1000000
  inflate_file dir3/sub2/alotof_kafkas dir3/sub1/many_kafkas 10000000
  inflate_file dir3/sub3/kafka_army dir3/sub2/alotof_kafkas  50000000

  rm -f dir2/sub1/*

  touch dir2/sub1/tharrington
  echo "Forever we remain oblivious to the future, "    >> dir2/sub1/tharrington
  echo "lost to the past and enduring our torture. "    >> dir2/sub1/tharrington
  echo "Forever we take chances to settle our scores, " >> dir2/sub1/tharrington
  echo "losing some battles and winning some wars. "    >> dir2/sub1/tharrington
  echo "Forever .........."                             >> dir2/sub1/tharrington

  rm -fR dir1

  popdir
}

produce_files_4_in() {
  local working_dir=$1
  pushdir $working_dir

  rm -fR dir3

  popdir
}

TEST559_LOCAL_MOUNTPOINT=""
cleanup() {
  echo "running cleanup()"
  [ -z "$TEST559_LOCAL_MOUNTPOINT" ] || sudo umount $TEST559_LOCAL_MOUNTPOINT
}

cvmfs_run_test() {
  local logfile=$1
  local script_location=$2
  local scratch_dir=$(pwd)
  local repo_dir=/cvmfs/$CVMFS_TEST_REPO

  mkdir reference_dir1
  mkdir reference_dir2
  mkdir reference_dir3
  mkdir reference_dir4
  local reference_dir1=$scratch_dir/reference_dir1
  local reference_dir2=$scratch_dir/reference_dir2
  local reference_dir3=$scratch_dir/reference_dir3
  local reference_dir4=$scratch_dir/reference_dir4

  echo "*** create a fresh repository named $CVMFS_TEST_REPO with user $CVMFS_TEST_USER"
  create_empty_repo $CVMFS_TEST_REPO $CVMFS_TEST_USER NO -z || return $?

  echo "*** disable automatic garbage collection"
  disable_auto_garbage_collection $CVMFS_TEST_REPO || return $?

  # ============================================================================

  echo "*** starting transaction to edit repository (1)"
  start_transaction $CVMFS_TEST_REPO || return $?

  echo "*** putting some stuff in the new repository"
  produce_files_1_in $repo_dir || return 1

  echo "*** putting exactly the same stuff in the scratch spaces for comparison"
  produce_files_1_in $reference_dir1 || return 2

  echo "*** creating CVMFS snapshot"
  publish_repo $CVMFS_TEST_REPO -a revision_1 -m "create some files in dir1" > publish_1.log 2>&1 || return $?

  echo "*** compare the results of cvmfs to our reference copy"
  compare_directories $repo_dir $reference_dir1 || return $?

  # ============================================================================

  echo "*** starting transaction to edit repository (2)"
  start_transaction $CVMFS_TEST_REPO || return $?

  echo "*** putting some stuff in the new repository"
  produce_files_2_in $repo_dir || return 3

  echo "*** putting exactly the same stuff in the scratch spaces for comparison"
  produce_files_1_in $reference_dir2 || return 4
  produce_files_2_in $reference_dir2 || return 4

  echo "*** creating CVMFS snapshot"
  publish_repo $CVMFS_TEST_REPO -a revision_2 -m "put some poems in dir2" > publish_2.log 2>&1 || return $?

  echo "*** compare the results of cvmfs to our reference copy"
  compare_directories $repo_dir $reference_dir2 || return $?

  # ============================================================================

  echo "*** starting transaction to edit repository (3)"
  start_transaction $CVMFS_TEST_REPO || return $?

  echo "*** putting some stuff in the new repository"
  produce_files_3_in $repo_dir || return 5

  echo "*** putting exactly the same stuff in the scratch spaces for comparison"
  produce_files_1_in $reference_dir3 || return 6
  produce_files_2_in $reference_dir3 || return 6
  produce_files_3_in $reference_dir3 || return 6

  echo "*** creating CVMFS snapshot"
  publish_repo $CVMFS_TEST_REPO -a revision_3 -m "put poems in dir3 and remove dir1" > publish_3.log 2>&1 || return $?

  echo "*** compare the results of cvmfs to our reference copy"
  compare_directories $repo_dir $reference_dir3 || return $?

  # ============================================================================

  echo "*** starting transaction to edit repository (4)"
  start_transaction $CVMFS_TEST_REPO || return $?

  echo "*** putting some stuff in the new repository"
  produce_files_4_in $repo_dir || return 7

  echo "*** putting exactly the same stuff in the scratch spaces for comparison"
  produce_files_1_in $reference_dir4 || return 8
  produce_files_2_in $reference_dir4 || return 8
  produce_files_3_in $reference_dir4 || return 8
  produce_files_4_in $reference_dir4 || return 8

  echo "*** creating CVMFS snapshot"
  publish_repo $CVMFS_TEST_REPO -a revision_4 -m "delete dir3" > publish_4.log 2>&1 || return $?

  echo "*** compare the results of cvmfs to our reference copy"
  compare_directories $repo_dir $reference_dir4 || return $?

  # ============================================================================

  echo "*** create revisions moving the undo tags away from the system under test"
  local publish_log_5="publish_5.log"
  local i=2
  while [ $i -ne 0 ]; do
    i=$(( $i - 1 ))
    echo "*** creating dummy revision $i..." >> $publish_log_5
    start_transaction $CVMFS_TEST_REPO >> $publish_log_5 2>&1 || $?
    publish_repo      $CVMFS_TEST_REPO >> $publish_log_5 2>&1 || $?
    echo "*** done creating dummy revision $i..." >> $publish_log_5
  done

  # ============================================================================

  echo "*** print current named snapshot list"
  cvmfs_server tag -l $CVMFS_TEST_REPO || return 9

  echo "*** removing generic tags"
  local condemned_clgs="$(cvmfs_server tag -lx $CVMFS_TEST_REPO | grep '^generic' | awk '{print $2}' | tail -n2)"
  local auto_tags="$(     cvmfs_server tag -lx $CVMFS_TEST_REPO | grep '^generic' | awk '{print $1}')"
  local remove_flags=""
  for tag in $auto_tags; do
    remove_flags="-r $tag $remove_flags"
  done
  cvmfs_server tag $remove_flags -f $CVMFS_TEST_REPO || return 9

  # ============================================================================

  local shakespeare_object="5ccb03a6d732ff70310ba5db25756a6cd4675710"
  local chopped_shakespeare_1="f58287c6c5a608d70491519d4f3dc3b3436b607aP"
  local chopped_shakespeare_2="1e3618d857695eab0e30da35fcd9ea5e3f52f266P"
  local chopped_shakespeare_3="c3cc8c92d5ea75da3207498fae45123b8a172d21P"
  local kafka_object="fd8370662e701313534bfc2d2b860a7bf0fbf5da"
  local chopped_kafka_1="1d4964dc2146c16f2f351b153347890e2513a8eaP"
  local chopped_kafka_2="78d66a3880097d4b4bcd5145fea11498c4306ed0P"
  local chopped_kafka_3="ed021be42b51c299560b9617c6585a4c40607158P"
  echo "check if poem objects are there ($shakespeare_object)..."
  peek_backend $CVMFS_TEST_REPO $shakespeare_object || return 10
  peek_backend $CVMFS_TEST_REPO $kafka_object       || return 10

  echo "check if the file chunks are there"
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_1 || return 11
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_2 || return 11
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_3 || return 11
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_1       || return 11
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_2       || return 11
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_3       || return 11

  local preserved_clgs="$(cvmfs_server tag -lx $CVMFS_TEST_REPO | grep 'revision_' | awk '{print $2}')"

  echo "*** check if all catalog revisions are still there"
  for clg_hash in $condemned_clgs $preserved_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C || return 12
  done

  echo "*** print current named snapshot list"
  cvmfs_server tag -l $CVMFS_TEST_REPO || return 13

  echo "*** perform garbage collection (removing all revisions that have no named snapshots)"
  cvmfs_server gc -r0 -f $CVMFS_TEST_REPO || return 13

  echo "*** check if shakespeare is still there"
  peek_backend $CVMFS_TEST_REPO $shakespeare_object    || return 14
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_1 || return 14
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_2 || return 14
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_3 || return 14

  echo "*** check if kafka is still there"
  peek_backend $CVMFS_TEST_REPO $kafka_object    || return 15
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_1 || return 15
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_2 || return 15
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_3 || return 15

  echo "*** check if the catalog revisions 1-2 are gone"
  for clg_hash in $condemned_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C && return 16
  done

  echo "*** check if the catalog revisions 3-6 are preserved"
  for clg_hash in $preserved_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C || return 17
  done

  # ============================================================================

  echo "*** print current named snapshot list"
  cvmfs_server tag -l $CVMFS_TEST_REPO || return 18

  echo "*** remove tags that contain shakespeare"
  condemned_clgs="$(cvmfs_server tag -lx $CVMFS_TEST_REPO | grep 'revision_[1|2]' | awk '{print $2}')"
  cvmfs_server tag -r 'revision_1' -r 'revision_2' -f $CVMFS_TEST_REPO || return 19

  preserved_clgs="$(cvmfs_server tag -lx $CVMFS_TEST_REPO | grep 'revision_' | awk '{print $2}')"
  echo "check if all catalog revisions are still there"
  for clg_hash in $condemned_clgs $preserved_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C || return 20
  done

  echo "*** perform garbage collection (removing all revisions that have no named snapshots)"
  cvmfs_server gc -r0 -f $CVMFS_TEST_REPO || return 21

  echo "*** check if shakespeare is gone now"
  peek_backend $CVMFS_TEST_REPO $shakespeare_object    && return 22
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_1 && return 22
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_2 && return 22
  peek_backend $CVMFS_TEST_REPO $chopped_shakespeare_3 && return 22

  echo "*** check if kafka is still there"
  peek_backend $CVMFS_TEST_REPO $kafka_object    || return 23
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_1 || return 23
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_2 || return 23
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_3 || return 23

  echo "*** check if the catalog revisions 3-4 are gone"
  for clg_hash in $condemned_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C && return 24
  done

  echo "*** check if the catalog revisions 5-6 are preserved"
  for clg_hash in $preserved_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C || return 25
  done

  # ============================================================================

  echo "*** print current named snapshot list"
  cvmfs_server tag -l $CVMFS_TEST_REPO || return 26

  echo "*** remove intermediate revision 6 (revision_4)"
  condemned_clgs="$(cvmfs_server tag -lx $CVMFS_TEST_REPO | grep 'revision_4' | awk '{print $2}')"
  cvmfs_server tag -r 'revision_4' -f $CVMFS_TEST_REPO || return 27

  preserved_clgs="$(cvmfs_server tag -lx $CVMFS_TEST_REPO | awk '{print $2}')"
  echo "*** check if all catalog revisions are still there"
  for clg_hash in $condemned_clgs $preserved_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C || return 28
  done

  echo "*** perform garbage collection (removing all revisions that have no named snapshots)"
  cvmfs_server gc -r0 -f $CVMFS_TEST_REPO || return 29

  echo "*** check if kafka is still there"
  peek_backend $CVMFS_TEST_REPO $kafka_object    || return 31
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_1 || return 31
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_2 || return 31
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_3 || return 31

  echo "*** check if the catalog revision 6 is gone"
  for clg_hash in $condemned_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C && return 32
  done

  echo "*** check if the catalog revisions 5 and 7-8 are preserved"
  for clg_hash in $preserved_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C || return 33
  done

  echo "*** check if revision 5 (revision_3) is still sane"
  check_repository $CVMFS_TEST_REPO -i -t revision_3 || return 34

  # ============================================================================

  echo "*** set a trap for desaster cleanup"
  trap cleanup EXIT HUP INT TERM

  echo "*** mount revision_3 locally"
  local mount_base="$(pwd)/mount_test"
  local mountpoint="${mount_base}/mnt"
  local cachedir="${mount_base}/cache"
  local mntconfig="${mount_base}/mnt.conf"
  local debuglog="${mount_base}/debug.log"
  mkdir -p $mountpoint $cachedir
  touch $mntconfig
  cat > $mntconfig << EOF
CVMFS_CACHE_BASE=$cachedir
CVMFS_RELOAD_SOCKETS=$cachedir
CVMFS_SERVER_URL=$(get_repo_url $CVMFS_TEST_REPO)
CVMFS_HTTP_PROXY=DIRECT
CVMFS_PUBLIC_KEY=/etc/cvmfs/keys/${CVMFS_TEST_REPO}.pub
CVMFS_KCACHE_TIMEOUT=15
CVMFS_REPOSITORY_TAG=revision_3
CVMFS_DEBUGLOG=$debuglog
EOF
  TEST559_LOCAL_MOUNTPOINT=$mountpoint
  cvmfs2 -d -o config=$mntconfig $CVMFS_TEST_REPO $mountpoint || return 35

  echo "*** compare local mount with reference directory"
  compare_directories $mountpoint $reference_dir3 || return 36

  # ============================================================================

  echo "*** run a final garbage collection with history traversal (shouldn't find any history)"
  cvmfs_server gc -r 20 -f $CVMFS_TEST_REPO || return 37

  echo "*** check if kafka is still there"
  peek_backend $CVMFS_TEST_REPO $kafka_object    || return 38
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_1 || return 38
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_2 || return 38
  peek_backend $CVMFS_TEST_REPO $chopped_kafka_3 || return 38

  echo "*** check if all tag-referenced catalogs are still there"
  preserved_clgs="$(cvmfs_server tag -lx $CVMFS_TEST_REPO | awk '{print $2}')"
  for clg_hash in $preserved_clgs; do
    peek_backend $CVMFS_TEST_REPO ${clg_hash}C || return 39
  done

  # ============================================================================

  echo "*** check if the repository is still sane"
  check_repository $CVMFS_TEST_REPO -i || return 40

  echo "*** check if the repository's previous revision is still sane"
  check_repository $CVMFS_TEST_REPO -i -t trunk-previous || return 41

  return 0
}
