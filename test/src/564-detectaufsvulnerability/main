cvmfs_test_name="Detect Union File System Kernel Deadlock Vulnerability"
cvmfs_test_autofs_on_startup=false

check_aufs() {
  # threshold definitions
  local krnl_minimum_required="3.10.0"
  local krnl_sl6_minimal_fixed="431.29.2"

  local krnl_version="$(uname -r | cut --delimiter='-' --fields=1)"
  if compare_versions "$krnl_version" -ge "$krnl_minimum_required"; then
    return 1 # no problem, Linux kernel is recent enough (AUFS should be as well)
  fi

  # check if we are running the custom SL6 kernel (and if it is recent enough)
  if uname -r | grep -q "el6.aufs"; then
    local krnl_revision="$(uname -r | sed 's/^.*-\(.\+\)\.el6.*/\1/'))"
    if compare_versions "$krnl_revision" -ge "$krnl_sl6_minimal_fixed"; then
      return 1 # kernel contains the AUFS workaround fix
    fi
  fi

  return 0
}

check_overlayfs() {
  return 0 # OverlayFS does suffer from this in any case!
}

has_aufs() {
  /sbin/modprobe -q aufs || [ -d /sys/fs/aufs ]
}

has_overlayfs() {
  /sbin/modprobe -q overlayfs || [ -d /sys/module/overlayfs ] || \
  /sbin/modprobe -q overlay   || [ -d /sys/module/overlay   ]
}

# see if the kernel should be vulnerable in the first place
# Note: This is a simplified version of what is checked in `cvmfs_server`
is_kernel_vulnerable() {
  if has_overlayfs; then
    echo "Found OverlayFS"
    check_overlayfs; return $?
  elif has_aufs; then
    echo "Found AUFS"
    check_aufs; return $?
  fi
}

check_for_warning() {
  local path_to_log="$1"
  cat $path_to_log | grep -q 'WARNING: Union filesystem config is vulnerable'
}

CVMFS_TEST_564_SERVER_CACHE=
cleanup() {
  if [ ! -z $CVMFS_TEST_564_SERVER_CACHE ]; then
    echo "Resetting CVMFS_TEST_SERVER_CACHE to '$CVMFS_TEST_564_SERVER_CACHE'"
    export CVMFS_TEST_SERVER_CACHE=$CVMFS_TEST_564_SERVER_CACHE
  fi
}

cvmfs_run_test() {
  logfile=$1
  local repo_dir=/cvmfs/$CVMFS_TEST_REPO
  local krnl_vulnerable=1

  echo "check if kernel is vulnerable in the first place"
  if ! is_kernel_vulnerable; then
    echo "--> Kernel is not vulnerable per se... nothing to expect here"
    krnl_vulnerable=0
  fi

  echo "create a fresh repository named $CVMFS_TEST_REPO with user $CVMFS_TEST_USER that might be vulnerable"
  if [ ! -z $CVMFS_TEST_SERVER_CACHE ]; then
    echo "Using default cache directory instead of CVMFS_TEST_SERVER_CACHE='$CVMFS_TEST_SERVER_CACHE'"
    trap cleanup EXIT HUP INT TERM
    CVMFS_TEST_564_SERVER_CACHE=$CVMFS_TEST_SERVER_CACHE
    export CVMFS_TEST_SERVER_CACHE=""
  fi

  create_empty_repo $CVMFS_TEST_REPO $CVMFS_TEST_USER || return $?

  # cleanup trap is not necessary anymore
  trap - EXIT HUP INT TERM
  cleanup

  echo "starting transaction to check for warning message"
  local transaction_output_1="transaction_1.log"
  start_transaction $CVMFS_TEST_REPO 2>&1 > $transaction_output_1 || return 1
  if ! check_for_warning $transaction_output_1; then
    if [ $krnl_vulnerable -eq 1 ]; then
      return 2
    else
      echo "kernel is not vulnerable and error message didn't show up"
    fi
  fi

  echo "aborting transaction"
  abort_transaction $CVMFS_TEST_REPO || return 3

  echo "add silence configuration flag"
  echo "CVMFS_AUFS_WARNING=false" | sudo tee --append /etc/cvmfs/repositories.d/${CVMFS_TEST_REPO}/server.conf

  echo "starting transaction to check for warning message to be gone"
  local transaction_output_2="transaction_2.log"
  start_transaction $CVMFS_TEST_REPO 2>&1 > $transaction_output_2 || return 4
  check_for_warning $transaction_output_2                         && return 5

  echo "aborting transaction"
  abort_transaction $CVMFS_TEST_REPO || return 6

  echo "create a new repository that is not vulnerable"
  create_empty_repo $CVMFS_TEST_REPO $CVMFS_TEST_USER || return $?

  echo "starting transaction to check for absence of warning message"
  local transaction_output_3="transaction_3.log"
  start_transaction $CVMFS_TEST_REPO 2>&1 > $transaction_output_3 || return 7
  check_for_warning $transaction_output_3                         && return 8

  echo "aborting transaction"
  abort_transaction $CVMFS_TEST_REPO || return 9

  return 0
}

