
cvmfs_test_name="OverlayFS Validation"
cvmfs_test_autofs_on_startup=false

set_up_work_dir() {
    root_dir=$(pwd)
    read_only=$root_dir/read_only
    read_write=$root_dir/read_write
    work_dir=$root_dir/work_dir
    union=$root_dir/union

    # preparation
    echo "Creating overlay fs"
    mkdir -p $read_only $read_write $work_dir $union
    echo "foobar" > $read_only/foobar
    sudo mount -t overlay -o rw,lowerdir=$read_only,upperdir=$read_write,workdir=$work_dir test_ofs $union
}

clean_work_dir() {
    sudo umount -f test_ofs
    sudo rm -fr $root_dir
}

check_status() {
    echo $(( $1 || 0 ))
}

# 1. Delete files in the lower read-only branch of the union fs
delete_file_in_lower_branch() {
    echo "Check deleting files in the lower read-only branch of the union fs"

    set_up_work_dir

    echo "Delete file from read-only layer"
    rm -f $union/foobar

    # ls produces obviously bogus output
    ls -lisa $union

    # cat encounters ENOENT as expected
    cat $union/foobar
    local status=$?

    # Cleaning up
    clean_work_dir

    return $(check_status $status)
}

# 2. Open file paths in /proc/\$PID/fd
check_file_path() {
    printf "\nCheck open file paths in /proc/\$PID/fd\n"

    set_up_work_dir

    # open a file on OverlayFS
    tail -f $union/foobar &
    tail_pid=$!

    # ls produces obviously bogus output
    echo "Check /proc/\$PID/fd"
    ls -lisa /proc/$tail_pid/fd
    local status=$?

    # Cleaning up
    kill -9 $tail_pid
    clean_work_dir

    return $(check_status $status)
}

# 3. Delete directories in the lower read-only branch of the union fs
delete_dir_in_lower_branch () {
    echo "Check deleting directories in the lower read-only branch of the union fs"

    set_up_work_dir

    # reproduction
    rm -fR $union/foo

    # ls shows that 'foo' is still there
    ls -lisa $union
    local status=$?

    # Cleaning up
    clean_work_dir

    return $(check_status $status)
}

# 4. Clear suid or sgid bits during writes on overlayfs
clear_suid_sgid_during_write () {
    echo "Check suid or sgid bits during writes on overlayfs"

    set_up_work_dir

    echo "  Clear suid during write"
    touch $work_dir/test.file
    chmod u+s $work_dir/test.file
    dd if=/dev/zero of=$work_dir/test.file bs=1M count=1024 &
    pid=$!
    chmod u-s $work_dir/test.file
    local status1=$?
    wait $pid

    echo "  Clear sgid during write"
    chmod g+s $work_dir/test.file
    dd if=/dev/zero of=$work_dir/test.file bs=1M count=1024 &
    pid=$!
    chmod g-s $work_dir/test.file
    local status2=$?
    wait $pid

    # Cleaning up
    clean_work_dir

    return $(check_status $(( $status1 && $status2 )))
}

cvmfs_run_test() {
    trap clean_work_dir EXIT HUP INT TERM || return $?

    delete_file_in_lower_branch
    local status1=$?
    check_file_path
    local status2=$?
    delete_dir_in_lower_branch
    local status3=$?
    clear_suid_sgid_during_write
    local status4=$?

    echo "Check deleting files in the lower read-only branch of the union fs: Status $status1"
    echo "Check open file paths in /proc/$PID/fd: Status $status2"
    echo "Check deleting directories in the lower read-only branch of the union fs: Status $status3"
    echo "Check suid or sgid bits during writes on overlayfs: Status $status4"

    return $(check_status $(( $status1 || $status2 || $status3 || $status4 )))
}

