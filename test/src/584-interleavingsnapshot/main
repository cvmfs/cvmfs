
cvmfs_test_name="Interleaving Stratum1 Snapshot Behaviour"
cvmfs_test_autofs_on_startup=false


create_fake_lock() {
  local name=$1
  local pid=${2:-$$} # use our own PID by default to fool the stale lock check

  load_repo_config $name

  echo "creating ${CVMFS_SPOOL_DIR}/is_snapshotting.lock with PID $pid"
  echo "$pid" > ${CVMFS_SPOOL_DIR}/is_snapshotting.lock
}

remove_fake_lock() {
  local name=$1
  load_repo_config $name
  echo "removing ${CVMFS_SPOOL_DIR}/is_snapshotting.lock"
  rm -f ${CVMFS_SPOOL_DIR}/is_snapshotting.lock
}

check_lock() {
  local name=$1
  load_repo_config $name
  [ -f ${CVMFS_SPOOL_DIR}/is_snapshotting.lock ]
}

run_background_snapshot() {
  local name=$1
  local logfile=$2
  local max_waiting_time=$3
  shift 3
  local snapshot_params="$*"

  local snapshot_command="cvmfs_server snapshot $snapshot_params $name"
  local pid=0

  echo "running \`${snapshot_command}\`"
  pid=$(run_background_service $logfile "$snapshot_command") || return $?

  echo -n "waiting for snapshot (PID: $pid) for $max_waiting_time seconds... "
  local timeout=$max_waiting_time
  while kill -0 $pid > /dev/null 2>&1 && [ $timeout -gt 0 ]; do
    sleep 1
    timeout=$(( $timeout - 1 ))
  done
  echo "done (waited $(( $max_waiting_time - $timeout )) seconds)"

  if ! kill -0 $pid > /dev/null 2>&1; then
    echo "snapshot has terminated"
  else
    echo -n "snapshot is still running - aborting it... "
    kill -9 $pid && echo "done" || echo "fail"
    return 1
  fi
}

count_fetched_catalogs() {
  local replication_log_file="$1"

  # figure out where replication starts to process repository tags
  # we do not want to count in that part of the log
  local cutmark=$(cat $replication_log_file | grep -n "repository tag" | head -n 1 | cut -f1 -d:)

  # count the number of times the pulling decided to fetch chunks
  cat $replication_log_file | head -n $cutmark | grep 'Processing chunks' | wc -l
}


CVMFS_TEST_584_REPLICA_NAME=""
cleanup() {
  echo "running cleanup()"
  if [ ! -z $CVMFS_TEST_584_REPLICA_NAME ]; then
    sudo cvmfs_server rmfs -f $CVMFS_TEST_584_REPLICA_NAME
  fi
}

cvmfs_run_test() {
  local logfile=$1
  local script_location=$2
  local scratch_dir=$(pwd)
  local repo_dir=/cvmfs/$CVMFS_TEST_REPO

  echo "create a fresh repository named $CVMFS_TEST_REPO with user $CVMFS_TEST_USER"
  create_empty_repo $CVMFS_TEST_REPO $CVMFS_TEST_USER NO || return $?

  echo "install a desaster cleanup function"
  trap cleanup EXIT HUP INT TERM || return $?

  echo "create Stratum1 repository on the same machine"
  local replica_name="$(get_stratum1_name $CVMFS_TEST_REPO)"
  CVMFS_TEST_584_REPLICA_NAME="$replica_name"
  load_repo_config $CVMFS_TEST_REPO
  create_stratum1 $replica_name                          \
                  $CVMFS_TEST_USER                       \
                  $CVMFS_STRATUM0                        \
                  /etc/cvmfs/keys/${CVMFS_TEST_REPO}.pub || return 1

  # ============================================================================

  echo "fake a running snapshot"
  create_fake_lock $replica_name || return 2

  echo "create an initial snapshot (should immediately fail)"
  local snapshot_log_1="snapshot_1.log"
  run_background_snapshot $replica_name $snapshot_log_1 15 || return 2

  echo "check if the snapshotting lock is there"
  check_lock $replica_name || return 3

  echo "check log file for proper error message"
  cat $snapshot_log_1 | grep 'initial snapshot.*in progress.*abort' || return 4

  echo "create an initial snapshot without waiting (should immediately fail)"
  local snapshot_log_2="snapshot_2.log"
  run_background_snapshot $replica_name $snapshot_log_2 15 -t || return 5

  echo "check if the snapshotting lock is there"
  check_lock $replica_name || return 6

  echo "check log file for proper error message"
  cat $snapshot_log_2 | grep 'another snapshot.*in progress.*abort' || return 7

  echo "remove faked lock"
  remove_fake_lock $replica_name || return 8

  # ============================================================================

  echo "create an initial snapshot (should work)"
  local snapshot_log_3="snapshot_3.log"
  run_background_snapshot $replica_name $snapshot_log_3 120 || return 9

  echo "check if the snapshotting lock is gone"
  check_lock $replica_name && return 10

  echo "check the log file for proper manifest upload"
  cat $snapshot_log_3 | grep 'Uploading manifest' || return 11

  # ============================================================================

  echo "create a couple of transactions in stratum 0"
  local publish_log_1="publish_1.log"
  start_transaction $CVMFS_TEST_REPO || return $?
  mkdir ${repo_dir}/foo
  cp_bin $repo_dir/foo
  publish_repo $CVMFS_TEST_REPO >> $publish_log_1 2>&1 || return $?

  start_transaction $CVMFS_TEST_REPO || return $?
  mkdir ${repo_dir}/bar
  cp_bin $repo_dir/bar
  publish_repo $CVMFS_TEST_REPO >> $publish_log_1 2>&1 || return $?

  start_transaction $CVMFS_TEST_REPO || return $?
  mkdir ${repo_dir}/baz
  cp_bin $repo_dir/baz
  publish_repo $CVMFS_TEST_REPO >> $publish_log_1 2>&1 || return $?

  start_transaction $CVMFS_TEST_REPO || return $?
  mkdir ${repo_dir}/bam
  cp_bin $repo_dir/bam
  publish_repo $CVMFS_TEST_REPO >> $publish_log_1 2>&1 || return $?

  start_transaction $CVMFS_TEST_REPO || return $?
  mkdir ${repo_dir}/buz
  cp_bin $repo_dir/buz
  publish_repo $CVMFS_TEST_REPO >> $publish_log_1 2>&1 || return $?

  start_transaction $CVMFS_TEST_REPO || return $?
  mkdir ${repo_dir}/big
  dd if=/dev/urandom of=${repo_dir}/big/1 count=100 bs=1MiB > /dev/null 2>&1 || return 12
  dd if=/dev/urandom of=${repo_dir}/big/2 count=100 bs=1MiB > /dev/null 2>&1 || return 13
  dd if=/dev/urandom of=${repo_dir}/big/3 count=100 bs=1MiB > /dev/null 2>&1 || return 14
  dd if=/dev/urandom of=${repo_dir}/big/4 count=100 bs=1MiB > /dev/null 2>&1 || return 15
  publish_repo $CVMFS_TEST_REPO >> $publish_log_1 2>&1 || return $?

  # ============================================================================

  echo "create a fake lock"
  create_fake_lock $replica_name || return 16

  echo "try to snapshot (should hang forever)"
  local snapshot_log_4="snapshot_4.log"
  run_background_snapshot $replica_name $snapshot_log_4 30 && return 17

  echo "check if the snapshotting lock is there"
  check_lock $replica_name || return 18

  echo "check error message"
  cat $snapshot_log_4 | grep 'waiting .* snapshot .* finish' || return 19

  echo "try to snapshot (without waiting)"
  local snapshot_log_5="snapshot_5.log"
  run_background_snapshot $replica_name $snapshot_log_5 30 -t || return 20

  echo "check if the snapshotting lock is there"
  check_lock $replica_name || return 21

  echo "check log file for proper error message"
  cat $snapshot_log_2 | grep 'another snapshot.*in progress.*abort' || return 22

  echo "remove the fake log"
  remove_fake_lock $replica_name || return 23

  # ============================================================================

  echo "try to snapshot (in the background)"
  local snapshot_log_6="snapshot_6.log"
  local pid6=$(run_background_service $snapshot_log_6 "cvmfs_server snapshot $replica_name") || return 24
  echo "running with PID: $pid6"

  echo "sleep for one second"
  sleep 1

  echo "check if the snapshotting lock is there"
  check_lock $replica_name || return 25

  echo "run a second snapshot concurrently (should abort immediately)"
  local snapshot_log_7="snapshot_7.log"
  run_background_snapshot $replica_name $snapshot_log_7 15 -t || return 26

  echo "check if the snapshotting lock is there"
  check_lock $replica_name || return 27

  echo "check if the first snapshot is still running (we missed the race otherwise)"
  kill -0 $pid6 || return 28

  echo "check if the snapshotting lock is there"
  check_lock  $replica_name || return 29

  echo "run a second snapshot concurrently (should wait and later do the snapshot)"
  local snapshot_log_8="snapshot_8.log"
  run_background_snapshot $replica_name $snapshot_log_8 800 || return 30

  echo "check if the first snapshot is gone (kill it otherwise)"
  if kill -0 $pid6 > /dev/null 2>&1; then
    echo -n "PID $pid6 is still around - killing it... "
    kill -9 $pid6
    echo "done"
    return 31
  fi

  echo "check if the snapshotting lock is gone"
  check_lock $replica_name && return 32

  echo "check the log files"
  echo "(6 should have snapshotted, 7 should have aborted, 8 should have waited and later snapshotted)"
  local revisions_snapshotted_by_6=$(count_fetched_catalogs $snapshot_log_6)
  local revisions_snapshotted_by_7=$(count_fetched_catalogs $snapshot_log_7)
  echo "Number 6 snapshotted $revisions_snapshotted_by_6 revisions"
  echo "Number 7 snapshotted $revisions_snapshotted_by_7 revisions"
  [ $revisions_snapshotted_by_6 -eq 6 ]                             || return 33
  [ $revisions_snapshotted_by_7 -eq 0 ]                             || return 34
  cat $snapshot_log_6 | grep 'Uploading manifest'                   || return 35
  cat $snapshot_log_7 | grep 'another snapshot.*in progress.*abort' || return 36
  cat $snapshot_log_8 | grep 'waiting.*snapshot to finish'          || return 37
  cat $snapshot_log_8 | grep 'Uploading manifest'                   || return 38

  # ============================================================================

  echo "place a fake lock that is stale"
  create_fake_lock $replica_name 3282168345613 || return 39

  echo "create a snapshot (should work - despite the stale lock)"
  local snapshot_log_9="snapshot_9.log"
  run_background_snapshot $replica_name $snapshot_log_9 30 || return 40

  echo "check if the lock is gone"
  check_lock $replica_name && return 41

  echo "check the log file"
  cat $snapshot_log_9 | grep 'Uploading manifest' || return 42

  return 0
}
