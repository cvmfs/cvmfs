cvmfs_test_name="GeoIP Service"
cvmfs_test_autofs_on_startup=false

CVMFS_TEST_614_REPLICA_NAME=

cleanup() {
  [ -z "$CVMFS_TEST_614_REPLICA_NAME" ] || sudo cvmfs_server rmfs -f $CVMFS_TEST_614_REPLICA_NAME
}

cvmfs_getaddr() {
  # exit after the first line in case there are multiple addresses
  ip $1 -o addr show scope global|awk '{split($4,a,"/");print a[1];exit}'
}

# Check the results from an ordering of 3 servers.
# When coming from *.cern.ch or *.fnal.gov, ihe reqorder should have the
#  ordering of cern, fnal, and ihep.
cvmfs_check_georesult() {
  local result=$1
  local from=$2
  local reqorder=$3
  local expectorder
  echo "  result for $reqorder from $from is $result"
  [ -n "$1" ] || return 1
  if [[ "$from" == *.cern.ch ]] || [[ "$from" == *.fnal.gov ]]; then
    local cern
    local fnal
    local ihep
    local site
    local n=1
    for site in ${reqorder//,/ }; do
      eval $site=$n
      let n+=1
    done
    if [[ "$from" == *.cern.ch ]]; then
      expectorder=$cern,$fnal,$ihep
    elif [[ "$from" == *.fnal.gov ]]; then
      expectorder=$fnal,$cern,$ihep
    fi
  else
    # not testing at CERN or FNAL, so any order will do unless there's
    #  an exact match; if so, that one should be first
    if [[ "$reqorder" = $from,*,* ]]; then
      expectorder="1,[23],[23]"
    elif [[ "$reqorder" = *,$from,* ]]; then
      expectorder="2,[13],[13]"
    elif [[ "$reqorder" = *,*,$from ]]; then
      expectorder="3,[12],[12]"
    else
      expectorder="[123],[123],[123]"
    fi
  fi
  echo "  expected order is $expectorder"
  [[ $result == $expectorder ]] || return 2
}

# Check the results from an ordering of 3 servers, a separator, and a
#  fallback proxy.  The separator (number 4) should always be last, and
#  the fallback proxy (number 5) should always be second to last. 
cvmfs_check_geosepresult() {
  local result=$1
  local from=$2
  local reqorder=$3
  if [[ "$result" != *,*,*,5,4 ]]; then
    echo "  \"$result\" does not end in ',5,4'"
    return 3
  fi
  cvmfs_check_georesult "${result/,5,4/}" $from $reqorder
}

cvmfs_run_test() {
  logfile=$1

  echo "checking if both IPv4 and IPv6 addresses are available"
  local ipv4addr="`cvmfs_getaddr -4`"
  local ipv6addr="`cvmfs_getaddr -6`"
  [ -n "$ipv4addr" ] || return 1
  if [ -z "$ipv6addr" ]; then
    echo "WARNING: No IPv6 address available, skipping IPv6 tests"
    CVMFS_GENERAL_WARNING_FLAG=1
  fi

  local repo_dir=/cvmfs/$CVMFS_TEST_REPO

  echo "create a fresh repository named $CVMFS_TEST_REPO with user $CVMFS_TEST_USER"
  create_empty_repo $CVMFS_TEST_REPO $CVMFS_TEST_USER || return $?

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  local replica_name="$(get_stratum1_name $CVMFS_TEST_REPO)"

  CVMFS_TEST_614_REPLICA_NAME=$replica_name
  echo "install a cleanup function"
  trap cleanup EXIT HUP INT TERM || return $?

  echo "create Stratum1 repository on the same machine"
  load_repo_config $CVMFS_TEST_REPO
  create_stratum1 $replica_name                          \
                  root                                   \
                  $CVMFS_STRATUM0                        \
                  /etc/cvmfs/keys/${CVMFS_TEST_REPO}.pub \
                  || return 3

  echo "do a snapshot to make sure geo ip database is downloaded"
  sudo cvmfs_server snapshot $replica_name || return 4

  local me="`uname -n`"
  local api="cvmfs/$replica_name/api/v1.0/geo"
  local sep="+PXYSEP+"
  local fnal=cvmfs.fnal.gov
  local cern=cvmfs-stratum-one.cern.ch
  local ihep=cvmfs-stratum-one.ihep.ac.cn
  local fnalbp=cvmfsbproxy.fnal.gov
  local cernbp=cvmfsbproxy.cern.ch
  local ipv6=ipv6.cybernode.com  # has only ipv6 address
  local other=google.com # has both ipv4 and ipv6.  if multiple addresses,
                         #  should resolve to same or close-by geolocation.
  local result

  # limit the output from curl to 5 lines so in case there's some kind
  #   of error some useful output will show but not too much

  echo "checking x-forwarded-for IPv4"
  result="`curl -s -H "x-forwarded-for: $ipv4addr" http://localhost/$api/x/$fnal,$cern,$ihep|head -5`"
  cvmfs_check_georesult "$result" $me fnal,cern,ihep || return 5

  if [ -n "$ipv6addr" ]; then
    echo "checking x-forwarded-for IPv6"
    result="`curl -s -H "x-forwarded-for: $ipv6addr" http://localhost/$api/x/$ihep,$fnal,$cern|head -5`"
    cvmfs_check_georesult "$result" $me ihep,fnal,cern || return 6
  fi

  echo "checking direct IPv4"
  result="`curl -s http://$ipv4addr/$api/x/$cern,$ihep,$fnal|head -5`"
  cvmfs_check_georesult "$result" $me cern,ihep,fnal || return 7

  if [ -n "$ipv6addr" ]; then
    echo "checking direct IPv6"
    result="`curl -s -g http://[$ipv6addr]/$api/x/$fnal,$ihep,$cern|head -5`"
    cvmfs_check_georesult "$result" $me fnal,ihep,cern || return 8
  fi

  echo "checking IPv6-only server"
  result="`curl -s http://$ipv4addr/$api/x/$ipv6,$cern,$fnal|head -5`"
  cvmfs_check_georesult "$result" ipv6onlytest ipv6,cern,fnal || return 9

  echo "checking proxy name IPv4"
  result="`curl -s http://localhost/$api/$other/$cern,$ipv6,$other|head -5`"
  cvmfs_check_georesult "$result" $other $cern,$ipv6,$other || return 10

  echo "checking proxy name IPv6"
  result="`curl -s http://localhost/$api/$ipv6/$ipv6,$fnal,$other|head -5`"
  cvmfs_check_georesult "$result" $ipv6 $ipv6,$fnal,$other || return 11

  echo "checking ordering from CERN fallback proxy"
  result="`curl -s http://localhost/$api/$fnalbp/$fnal,$ihep,$cern,$sep,$cernbp|head -5`"
  cvmfs_check_geosepresult "$result" $cernbp fnal,ihep,cern || return 12

  echo "checking ordering from FNAL fallback proxy"
  result="`curl -s http://localhost/$api/$other/$cern,$fnal,$ihep,$sep,$fnalbp|head -5`"
  cvmfs_check_geosepresult "$result" $fnalbp cern,fnal,ihep || return 13

  echo "checking parallelism and cache limit (could take a couple of minutes)"
  # The number of api processing threads is 64, and cache limit is 100k.
  # We want to surpass each limit.  Surpass number of parallel threads
  #  by a factor of 4, to 256.  Use IP addresses instead of dns names so
  #  it doesn't actually contact the DNS.  There's 256*258 (65k) IPv4
  #  addresses available in a class B network, so using two of them will
  #  surpass the 100k limit.  Use the process number as part of the IP
  #  address so only unique names are used.

  local pids procn site classb expected subn addr urls
  procn=0
  while [ $procn -lt 256 ]; do
    (
      for site in cern fnal; do 
        case $site in
          cern)
            classb=128.142
            expected=1,2,3
            ;;
          fnal)
            classb=131.225
            expected=2,1,3
            ;;
        esac
        subn=0
        # send 256 urls at a time to curl; otherwise it is too slow
        urls=""
        while [ $subn -lt 256 ]; do
          addr=$classb.$subn.$procn
          urls="$urls http://localhost/$api/$addr/$cern,$fnal,$ihep"
          let subn=$subn+1
        done
        curl -s $urls 2>&1 | \
          (
          subn=0
          while read result; do
            addr=$classb.$subn.$procn
            if [ "$result" != "$expected" ]; then
              echo "query on $addr failed! expected $expected, got $result"
              return 1
            fi
            let subn=$subn+1
          done
          if [ $subn -ne 256 ]; then
            echo "expected 256 results in proc $procn for $classb, got $subn"
            return 1
          fi
          ) || return 1
      done
    ) &
    pids="$pids $!"
    let procn=$procn+1
  done
  local pid
  for pid in $pids; do
    # wait individually in order to check the return codes
    wait $pid || return 14
  done
  echo "parallelism test completed successfully"

  return 0
}
