.\" Process this file with
.\" groff -man -Tascii foo.1
.\"
.TH cvmfs-test 1 "August 2012" Linux "User Manuals"
.SH NAME
cvmfs-test \- Test cvmfs features.
.SH SYNOPSIS
.B cvmfs-test [--i] [--setup] [--start] [--wait-daemon] [--c | --command
.I command
.B ]
.br
At the end of this man pages you'll find some actual
usage examples.
.SH DESCRIPTION
.B cvmfs-test
is framework to test the behaviour of
.B CernVM File System.
It's used to check regression in newer
version of the software and to test new features.
.SH OPTIONS
.IP --i
Start it in interactive mode.
When you start it in interactive mode, you
will be presented with a shell that will accept
several commands. Type
.B help
to find a list of available commands. This is the
default behaviour when
.B cvmfs-test
is invoked without any option.
.IP --setup
Fix permission and setup the environment for the
daemon. It's automatically executed during installation,
run it manually only if the shell explicitly asks you to do it.
.IP --start
Start the daemon and exit.
.IP --wait-daemon
When invoked with this option, the shell will wait for the daemon
to send its own ip address before trying to connect the
socket. It's used when the daemon isn't on the same
machine as the shell.
.IP "--c command | --command command"
Execute 
.B command
and exit. Where
.B command
is one of the available test listed below.
If you want to pass any argument to the test, you should
enclose the whole command within double quote.
.SH TEST LIST
.IP dns_timeout
Check if cvmfs respect timeout settings during dns request.
.IP faulty_proxy
Check if cvmfs mounts a repo with crap files.
.IP full_cache
Check how many bytes cvmfs transfers before stop a malicious download.
.IP ipv6_fallback
Check if cvmfs can work with ipv6 and if it fall back
to ipv4 if ipv6 fails.
.IP repo_signature
Check how cvmfs behave with wrong signature or hash on
repository files.
.IP short_ttl
Check if cvmfs is able to mount a repo from cache and if
it remount it from live connection after 4 minutes.
.SH ADD A NEW TEST
.PP 
Everytime you invoke a command within the shell,
this is what actually happens: the shell search for a folder
named as your command inside the directory
.B path/to/framework/Tests
or any subfolder,
if it finds such a folder, it will search for a file called
main.pl and will launch it.
.PP 
Adding a new test is easy as create a new folder, put a main.pl
file inside it and invoke the folder name. Of course, for a better
integration with the whole system you should follow
some guide lines. Invoke the command
.B skeleton
to find out where the skeleton file is installed in your
system. Have a look to that file. It's well commented and
cover all possibile case and scenarios. Use it as a model to write
your own test.
.PP
Moreover, every test must be accompanied by an
.B help
file which contains both short and long description
for your test, together with any option the script accepts.
.SH EXAMPLES
.IP "cvmfs-test --i"
Start the test framework in interactive mode.
.IP "cvmfs-test --c faulty_proxy"
Start the faulty_proxy test, wait for output and exit.
.IP "cvmfs-test --c \[lq]faulty_proxy --no-clean\[rq]"
Same as above, but adding options to the test. Note the
double quote to tell the shell that the whole string is the argument
of  the
.B --c
option.
.IP "cvmfs-test --c \[lq]help faulty_proxy\[rq]"
Retrieve options for faulty_proxy test.
.SH BUG
No bug known. If you find any, please report to the author.
.SH AUTHOR
Francesco Ruvolo <ruvolof
.B at
gmail
.B dot
com>
