#!/bin/bash

bin_path=/usr/bin
lib_path=/usr/lib

function usage()
{
  echo -e "Script to mount cvmfs on Linux/Mac OS X.
           Mandatory arguments:
           repository name: <repository>
           mountpoint of the repository: <mountpoint>
           Options:
           -o <mount options>
           -f dry run, just prints out the mount command
           -h print this help\n" 1>&2
}

function add_mount_option()
{
  if [[ -z ${mount_options} ]]; then
    mount_options="$1"
  else
    mount_options="${mount_options},$1"
  fi
}

while [ $# -ge 1 ]; do
  case $1 in
    -o ) add_mount_option $2; shift 2 ;;
    -v ) shift ;;
    -f ) dryrun=true; shift ;;
    -n ) echo "Note: fusermount _does_ modify /etc/mtab in case it is writable." ;;
    -h ) usage 1>&2; exit 1 ;;
    -* ) echo "$0: unrecognised option $1, use -h for help" 1>&2; exit 1 ;;
    *  ) args="$args;$1"; shift ;;
  esac
done

[ ${#args} -eq 0 ] || set $(echo $args | tr ";" "\n")

if [ $# -lt 2 ]; then
  echo "$0: Takes at least two arguments, use -h for help" 1>&2
fi

if [ -f /etc/cvmfs/config.sh ]
then
  . /etc/cvmfs/config.sh
else
  echo "Failed to source /etc/cvmfs/config.sh"
  exit 1
fi

cvmfs_readconfig
if [ $? -ne 0 ]; then
  echo "Failed to read CernVM-FS configuration"
  exit 1
fi

if [ "x$dryrun" != "xtrue" ]; then
  if [ -f "$CVMFS_RELOAD_SOCKETS/cvmfs.pause" ]; then
    echo "Waiting for CernVM-FS reload..."
    while [ -f "$CVMFS_RELOAD_SOCKETS/cvmfs.pause" ]; do
      sleep 1
    done
  fi
fi

device=`echo $1 | sed 's/\/cvmfs\///'` # sed is for Ubuntu 8.04 automounter
fqrn=`cvmfs_mkfqrn $device`
org=`cvmfs_getorg $fqrn`

# check the operating system
unamestr=`uname`

#fuse device
if [ "$unamestr" = 'Darwin' ]; then
  #load osxfuse kernel extension
  /Library/Filesystems/osxfusefs.fs/Support/load_osxfusefs
  fusedev="/dev/osxfuse0"
else
  fusedev="/dev/fuse"
fi

# Check for fuse
if [ ! -c $fusedev ]; then
  echo "Fuse not loaded"
  exit 1
fi

mountpoint=$2

cvmfs_readconfig $fqrn
retval=$?
if [ $retval -eq 1 ]; then
  echo "Failed to read CernVM-FS configuration"
  exit 1
fi
if [ $retval -eq 2 ]; then
  if [ x"$CVMFS_STRICT_MOUNT" = x"yes" ]; then
    echo "Not allowed to mount $fqrn, add it to CVMFS_REPOSITORIES"
    exit 1
  fi
fi
if [ -z $CVMFS_HTTP_PROXY ]; then
  echo "CVMFS_HTTP_PROXY required"
  exit 1
fi

if [ $unamestr = "Darwin" ]; then
  existing_mountpoint=`sudo -u cvmfs cvmfs_talk -i $fqrn mountpoint 2>&1`
else
  existing_mountpoint=`cvmfs_talk -i $fqrn mountpoint 2>&1`
fi
if [ $? -eq 0 ]; then
  echo "Repository $fqrn is already mounted on $existing_mountpoint"
  exit 1
fi

repository=`echo $CVMFS_SERVER_URL | sed "s/@org@/$org/g" | sed "s/@fqrn@/$fqrn/g"`
if [ x$CERNVM_CDN_HOST != x ]
then
  mdir=`echo $repository |  cut -d/ -f4-`
  repository="$repository,http://$CERNVM_CDN_HOST/$mdir"
fi
name=$fqrn

uid=`id -u $CVMFS_USER 2> /dev/null` && gid=`id -g $CVMFS_USER 2> /dev/null`

if [ $? -eq 0 ]
then
   CVMFS_ID="uid=$uid,gid=$gid"
else
   echo "Error: user $CVMFS_USER does not exist."
   exit 1
fi

if [ "$unamestr" = 'Darwin' ]; then
  sudo -u $CVMFS_USER mkdir -p $CVMFS_CACHE_DIR
  # create /var/run/cvmfs needed for reload functionality
  sudo mkdir -p /var/run/cvmfs
  sudo chown $CVMFS_USER /var/run/cvmfs
else
  mkdir -p $CVMFS_CACHE_DIR
  chown $CVMFS_USER $CVMFS_CACHE_DIR
  # create /var/run/cvmfs needed for reload functionality
  mkdir -p /var/run/cvmfs
  chown $CVMFS_USER /var/run/cvmfs
fi

add_mount_option "fsname=cvmfs2,allow_other,grab_mountpoint"
add_mount_option "$CVMFS_ID"
[ "x$CVMFS_DEBUGLOG" != x ] && add_mount_option "debug"

# set the number of open file handles per process
# at some point that will be handled a LaunchdScript
if [ "$unamestr" = "Darwin" ]; then
  MAXFILES_OVERALL=$(($CVMFS_NFILES + 512))
  sudo -u cvmfs sudo sysctl -w kern.maxfilesperproc=$CVMFS_NFILES kern.maxfiles=$MAXFILES_OVERALL > /dev/null
fi
ulimit -n $CVMFS_NFILES

cvmfs_exe=$bin_path/cvmfs2
export LD_LIBRARY_PATH=$lib_path:$LD_LIBRARY_PATH

if [[ "$unamestr" = 'Darwin' ]]; then
  cmd="sudo -u cvmfs sudo $cvmfs_exe -o ${mount_options} $name $mountpoint"
else
  cmd="$cvmfs_exe -o ${mount_options} $name $mountpoint"
fi

#check if group fuse exists
if [[ "$unamestr" == 'Linux' ]]; then
  getent group fuse > /dev/null
  if [ $? -eq 0 ]; then
    jump_group=y
  else
    jump_group=n
  fi
else
  jump_group=n
fi

if [ "x$dryrun" == "xtrue" ]; then
  if [ $jump_group == "y" ]; then
    echo -e -n sg fuse -c \"
    echo -n $cmd
    echo -e \"
  else
    echo -e -n /bin/sh -c \"
    echo $cmd
    echo -e \"
  fi
  exit 0
else
  if [ $jump_group == "y" ]; then
    sg fuse -c "$cmd"
  else
    /bin/sh -c "$cmd"
  fi
  if [ $? -eq 0 ]; then
    retval=0
  else
    retval=32  # mount failure
  fi
fi

exit $retval
