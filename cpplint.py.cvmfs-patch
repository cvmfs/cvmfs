diff --git a/cpplint.py b/cpplint.py
index 8158eb7..07808d7 100755
--- a/cpplint.py
+++ b/cpplint.py
@@ -766,7 +766,7 @@ _TYPES = re.compile(
 #   uppercase character, such as Python.h or nsStringAPI.h, for example).
 # - Lua headers.
 _THIRD_PARTY_HEADERS_PATTERN = re.compile(
-    r'^(?:[^/]*[A-Z][^/]*\.h|lua\.h|lauxlib\.h|lualib\.h)$')
+    r'^(?:[^/]*[A-Z][^/]*\.h|lua\.h|lauxlib\.h|lualib\.h|cvmfs_config\.h|sys/xattr\.h|gtest/gtest\.h|benchmark/benchmark\.h)$')
 
 # Pattern for matching FileInfo.BaseName() against test file name
 _test_suffixes = ['_test', '_regtest', '_unittest']
@@ -2270,11 +2270,11 @@ def CheckForCopyright(filename, lines, error):
   # We'll say it should occur by line 10. Don't forget there's a
   # placeholder line at the front.
   for line in xrange(1, min(len(lines), 11)):
-    if re.search(r'Copyright', lines[line], re.I): break
+    if re.search(r'This file is part of the CernVM File System', lines[line], re.I): break 
   else:                       # means no copyright line was found
     error(filename, 0, 'legal/copyright', 5,
-          'No copyright message found.  '
-          'You should have a line: "Copyright [year] <Copyright Owner>"')
+          'No cvmfs ownerhip tag found.  '
+          'You should have a line: "This file is part of the CernVM File System"')
 
 
 def GetIndentLevel(line):
@@ -4286,7 +4286,7 @@ def CheckBraces(filename, clean_lines, linenum, error):
     # following line if it is part of an array initialization and would not fit
     # within the 80 character limit of the preceding line.
     prevline = GetPreviousNonBlankLine(clean_lines, linenum)[0]
-    if (not Search(r'[,;:}{(]\s*$', prevline) and
+    if (not Search(r'[,;:}{()t>]\s*$', prevline) and
         not Match(r'\s*#', prevline) and
         not (GetLineWidth(prevline) > _line_length - 2 and '[]' in prevline)):
       error(filename, linenum, 'whitespace/braces', 4,
@@ -4306,12 +4306,12 @@ def CheckBraces(filename, clean_lines, linenum, error):
     # find the ( after the if
     pos = line.find('else if')
     pos = line.find('(', pos)
-    if pos > 0:
-      (endline, _, endpos) = CloseExpression(clean_lines, linenum, pos)
-      brace_on_right = endline[endpos:].find('{') != -1
-      if brace_on_left != brace_on_right:    # must be brace after if
-        error(filename, linenum, 'readability/braces', 5,
-              'If an else has a brace on one side, it should have it on both')
+    #if pos > 0:
+    #  (endline, _, endpos) = CloseExpression(clean_lines, linenum, pos)
+    #  brace_on_right = endline[endpos:].find('{') != -1
+    #  if brace_on_left != brace_on_right:    # must be brace after if
+    #    error(filename, linenum, 'readability/braces', 5,
+    #          'If an else has a brace on one side, it should have it on both')
   elif Search(r'}\s*else[^{]*$', line) or Match(r'[^}]*else\s*{', line):
     error(filename, linenum, 'readability/braces', 5,
           'If an else has a brace on one side, it should have it on both')
@@ -5103,12 +5103,12 @@ def CheckIncludeLine(filename, clean_lines, linenum, include_state, error):
   #
   # We also make an exception for Lua headers, which follow google
   # naming convention but not the include convention.
-  match = Match(r'#include\s*"([^/]+\.(.*))"', line)
-  if match:
-    if (IsHeaderExtension(match.group(2)) and
-        not _THIRD_PARTY_HEADERS_PATTERN.match(match.group(1))):
-      error(filename, linenum, 'build/include_subdir', 4,
-            'Include the directory when naming header files')
+  #match = Match(r'#include\s*"([^/]+\.(.*))"', line)
+  #if match:
+  #  if (IsHeaderExtension(match.group(2)) and
+  #      not _THIRD_PARTY_HEADERS_PATTERN.match(match.group(1))):
+  #    error(filename, linenum, 'build/include_subdir', 4,
+  #          'Include the directory when naming header files')
 
   # we shouldn't include a file more than once. actually, there are a
   # handful of instances where doing so is okay, but in general it's
@@ -6937,3 +6937,4 @@ def main():
 
 if __name__ == '__main__':
   main()
+
